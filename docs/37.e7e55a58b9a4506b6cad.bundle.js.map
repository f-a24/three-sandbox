{"version":3,"file":"37.e7e55a58b9a4506b6cad.bundle.js","sources":["webpack:///./src/chapter6/3.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nimport createMultiMaterialObject from '../utils/createMultiMaterialObject';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -20;\r\n  camera.position.y = 60;\r\n  camera.position.z = 60;\r\n  camera.lookAt(new THREE.Vector3(20, 20, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  const drawShape = () => {\r\n    const shape = new THREE.Shape();\r\n    shape.moveTo(10, 10);\r\n    shape.lineTo(10, 40);\r\n    shape.bezierCurveTo(15, 25, 25, 25, 30, 40);\r\n    shape.splineThru([\r\n      new THREE.Vector2(32, 30),\r\n      new THREE.Vector2(28, 20),\r\n      new THREE.Vector2(30, 10)\r\n    ]);\r\n    shape.quadraticCurveTo(20, 15, 10, 10);\r\n    const hole1 = new THREE.Path();\r\n    hole1.absellipse(16, 24, 2, 3, 0, Math.PI * 2, true, 0);\r\n    shape.holes.push(hole1);\r\n    const hole2 = new THREE.Path();\r\n    hole2.absellipse(23, 24, 2, 3, 0, Math.PI * 2, true, 0);\r\n    shape.holes.push(hole2);\r\n    const hole3 = new THREE.Path();\r\n    hole3.absarc(20, 16, 2, 0, Math.PI, true);\r\n    shape.holes.push(hole3);\r\n    return shape;\r\n  };\r\n\r\n  const createMesh = (geom: THREE.Geometry) => {\r\n    geom.applyMatrix(new THREE.Matrix4().makeTranslation(-20, 0, 0));\r\n    const meshMaterial = new THREE.MeshNormalMaterial({\r\n      transparent: true,\r\n      opacity: 0.7\r\n    });\r\n    const wireFrameMat = new THREE.MeshBasicMaterial();\r\n    wireFrameMat.wireframe = true;\r\n    const mesh = createMultiMaterialObject(geom, [meshMaterial, wireFrameMat]);\r\n    return mesh;\r\n  };\r\n\r\n  let shape = createMesh(new THREE.ShapeGeometry(drawShape()));\r\n  scene.add(shape);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    amount: 2,\r\n    bevelThickness: 2,\r\n    bevelSize: 0.5,\r\n    bevelEnabled: true,\r\n    bevelSegments: 3,\r\n    curveSegments: 12,\r\n    steps: 1,\r\n    asGeom: () => {\r\n      scene.remove(shape);\r\n      const options = {\r\n        amount: controls.amount,\r\n        bevelThickness: controls.bevelThickness,\r\n        bevelSize: controls.bevelSize,\r\n        bevelSegments: controls.bevelSegments,\r\n        bevelEnabled: controls.bevelEnabled,\r\n        curveSegments: controls.curveSegments,\r\n        steps: controls.steps\r\n      };\r\n      shape = createMesh(new THREE.ExtrudeGeometry(drawShape(), options));\r\n      scene.add(shape);\r\n    }\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'amount', 0, 20).onChange(controls.asGeom);\r\n  gui.add(controls, 'bevelThickness', 0, 10).onChange(controls.asGeom);\r\n  gui.add(controls, 'bevelSize', 0, 10).onChange(controls.asGeom);\r\n  gui\r\n    .add(controls, 'bevelSegments', 0, 30)\r\n    .step(1)\r\n    .onChange(controls.asGeom);\r\n  gui.add(controls, 'bevelEnabled').onChange(controls.asGeom);\r\n  gui\r\n    .add(controls, 'curveSegments', 1, 30)\r\n    .step(1)\r\n    .onChange(controls.asGeom);\r\n  gui\r\n    .add(controls, 'steps', 1, 5)\r\n    .step(1)\r\n    .onChange(controls.asGeom);\r\n\r\n  controls.asGeom();\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    shape.rotation.y = step += 0.01;\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}