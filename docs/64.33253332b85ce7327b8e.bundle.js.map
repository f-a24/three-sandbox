{"version":3,"file":"64.33253332b85ce7327b8e.bundle.js","sources":["webpack:///./src/chapter8/2.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    1,\r\n    500\r\n  );\r\n  camera.position.x = 0;\r\n  camera.position.y = 40;\r\n  camera.position.z = 50;\r\n  camera.lookAt(scene.position);\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0x000000));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  const cubeMaterial = new THREE.MeshNormalMaterial({\r\n    transparent: true,\r\n    opacity: 0.5\r\n  });\r\n\r\n  const addcube = () => {\r\n    const cubeSize = 1.0;\r\n    const cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);\r\n    const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\n    cube.castShadow = true;\r\n    cube.position.x = -60 + Math.round(Math.random() * 100);\r\n    cube.position.y = Math.round(Math.random() * 10);\r\n    cube.position.z = -150 + Math.round(Math.random() * 175);\r\n    return cube;\r\n  };\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    cameraNear: camera.near,\r\n    cameraFar: camera.far,\r\n    rotationSpeed: 0.02,\r\n    combined: false,\r\n    numberOfObjects: 500,\r\n    addCube: addcube,\r\n    outputObjects: () => {\r\n      console.log(scene.children);\r\n    },\r\n    redraw: () => {\r\n      const toRemove = [];\r\n      scene.traverse(e => {\r\n        if (e instanceof THREE.Mesh) toRemove.push(e);\r\n      });\r\n      toRemove.forEach(e => {\r\n        scene.remove(e);\r\n      });\r\n      if (controls.combined) {\r\n        const geometry = new THREE.Geometry();\r\n        for (let i = 0; i < controls.numberOfObjects; i++) {\r\n          const cubeMesh = addcube();\r\n          cubeMesh.updateMatrix();\r\n          geometry.merge(cubeMesh.geometry as THREE.Geometry, cubeMesh.matrix);\r\n        }\r\n        scene.add(new THREE.Mesh(geometry, cubeMaterial));\r\n      } else {\r\n        for (let i = 0; i < controls.numberOfObjects; i++) {\r\n          scene.add(controls.addCube());\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'numberOfObjects', 0, 20000);\r\n  gui.add(controls, 'combined').onChange(controls.redraw);\r\n  gui.add(controls, 'redraw');\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0.03;\r\n  let rotation = 0;\r\n  const renderScene = () => {\r\n    rotation += 0.005;\r\n    stats.update();\r\n\r\n    camera.position.x = Math.sin(rotation) * 50;\r\n    camera.position.z = Math.cos(rotation) * 50;\r\n    camera.lookAt(scene.position);\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  controls.redraw();\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}