{"version":3,"file":"53.5c7e7b0908d5d45295ef.bundle.js","sources":["webpack:///./src/chapter7/3.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = 20;\r\n  camera.position.y = 0;\r\n  camera.position.z = 150;\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0x000000));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n\r\n  let cloud: THREE.Points;\r\n  const createParticles = (\r\n    size: number,\r\n    transparent: boolean,\r\n    opacity: number,\r\n    vertexColors: boolean,\r\n    sizeAttenuation: boolean,\r\n    color: string | number | THREE.Color\r\n  ) => {\r\n    const geom = new THREE.Geometry();\r\n    const material = new THREE.PointsMaterial({\r\n      size: size,\r\n      transparent: transparent,\r\n      opacity: opacity,\r\n      vertexColors: vertexColors ? THREE.VertexColors : THREE.NoColors,\r\n      sizeAttenuation: sizeAttenuation,\r\n      color: color\r\n    });\r\n    const range = 500;\r\n    for (let i = 0; i < 15000; i++) {\r\n      const particle = new THREE.Vector3(\r\n        Math.random() * range - range / 2,\r\n        Math.random() * range - range / 2,\r\n        Math.random() * range - range / 2\r\n      );\r\n      geom.vertices.push(particle);\r\n      const color = new THREE.Color(0x00ff00);\r\n      color.setHSL(\r\n        color.getHSL({ h: 0, s: 0, l: 0 }).h,\r\n        color.getHSL({ h: 0, s: 0, l: 0 }).s,\r\n        Math.random() * color.getHSL({ h: 0, s: 0, l: 0 }).l\r\n      );\r\n      geom.colors.push(color);\r\n    }\r\n    cloud = new THREE.Points(geom, material);\r\n    cloud.name = 'particles';\r\n    scene.add(cloud);\r\n  };\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    size: 4,\r\n    transparent: true,\r\n    opacity: 0.6,\r\n    vertexColors: true,\r\n    color: 0xffffff,\r\n    sizeAttenuation: true,\r\n    rotateSystem: true,\r\n    redraw: () => {\r\n      if (scene.getObjectByName('particles')) {\r\n        scene.remove(scene.getObjectByName('particles'));\r\n      }\r\n      createParticles(\r\n        controls.size,\r\n        controls.transparent,\r\n        controls.opacity,\r\n        controls.vertexColors,\r\n        controls.sizeAttenuation,\r\n        controls.color\r\n      );\r\n    }\r\n  };\r\n\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'size', 0, 10).onChange(controls.redraw);\r\n  gui.add(controls, 'transparent').onChange(controls.redraw);\r\n  gui.add(controls, 'opacity', 0, 1).onChange(controls.redraw);\r\n  gui.add(controls, 'vertexColors').onChange(controls.redraw);\r\n  gui.addColor(controls, 'color').onChange(controls.redraw);\r\n  gui.add(controls, 'sizeAttenuation').onChange(controls.redraw);\r\n  gui.add(controls, 'rotateSystem');\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    if (controls.rotateSystem) {\r\n      step += 0.01;\r\n      cloud.rotation.x = step;\r\n      cloud.rotation.z = step;\r\n    }\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  controls.redraw();\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}