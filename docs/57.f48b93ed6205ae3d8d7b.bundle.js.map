{"version":3,"file":"57.f48b93ed6205ae3d8d7b.bundle.js","sources":["webpack:///./src/chapter7/8.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n  const sceneOrtho = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    250\r\n  );\r\n  const cameraOrtho = new THREE.OrthographicCamera(\r\n    0,\r\n    VIEWPORT_W,\r\n    VIEWPORT_H,\r\n    0,\r\n    -10,\r\n    10\r\n  );\r\n  camera.position.x = 0;\r\n  camera.position.y = 0;\r\n  camera.position.z = 50;\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0x000000));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n\r\n  const material = new THREE.MeshNormalMaterial();\r\n  const geom = new THREE.SphereGeometry(15, 20, 20);\r\n  const mesh = new THREE.Mesh(geom, material);\r\n  scene.add(mesh);\r\n\r\n  const getTexture = () => {\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const texture = textureLoader.load('./assets/sprite-sheet.png');\r\n    return texture;\r\n  };\r\n\r\n  const velocityX: number[] = [];\r\n  const createSprite = (\r\n    size: number,\r\n    transparent: boolean,\r\n    opacity: number,\r\n    color: number,\r\n    spriteNumber: number\r\n  ) => {\r\n    const spriteMaterial = new THREE.SpriteMaterial({\r\n      opacity: opacity,\r\n      color: color,\r\n      transparent: transparent,\r\n      map: getTexture()\r\n    });\r\n    spriteMaterial.map.offset = new THREE.Vector2(0.2 * spriteNumber, 0);\r\n    spriteMaterial.map.repeat = new THREE.Vector2(1 / 5, 1);\r\n    spriteMaterial.depthTest = false;\r\n    spriteMaterial.blending = THREE.AdditiveBlending;\r\n\r\n    const sprite = new THREE.Sprite(spriteMaterial);\r\n    sprite.scale.set(size, size, size);\r\n    sprite.position.set(100, 50, -10);\r\n    velocityX.push(5);\r\n    sceneOrtho.add(sprite);\r\n  };\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  const controls = {\r\n    size: 150,\r\n    sprite: 0,\r\n    transparent: true,\r\n    opacity: 0.6,\r\n    color: 0xffffff,\r\n    rotateSystem: true,\r\n    redraw: () => {\r\n      sceneOrtho.children.forEach(child => {\r\n        if (child instanceof THREE.Sprite) sceneOrtho.remove(child);\r\n      });\r\n      createSprite(\r\n        controls.size,\r\n        controls.transparent,\r\n        controls.opacity,\r\n        controls.color,\r\n        controls.sprite\r\n      );\r\n    }\r\n  };\r\n\r\n  /* gui */\r\n  const gui = new dat.GUI();\r\n  gui\r\n    .add(controls, 'sprite', 0, 4)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui.add(controls, 'size', 0, 120).onChange(controls.redraw);\r\n  gui.add(controls, 'transparent').onChange(controls.redraw);\r\n  gui.add(controls, 'opacity', 0, 1).onChange(controls.redraw);\r\n  gui.addColor(controls, 'color').onChange(controls.redraw);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    camera.position.y = Math.sin((step += 0.01)) * 20;\r\n    sceneOrtho.children.forEach((e, i) => {\r\n      if (e instanceof THREE.Sprite) {\r\n        e.position.x = e.position.x + velocityX[i];\r\n        if (e.position.x > window.innerWidth) {\r\n          velocityX[i] = -5;\r\n          controls.sprite = (controls.sprite + 1) % 5;\r\n          e.material.map.offset.set((1 / 5) * controls.sprite, 0);\r\n        }\r\n        if (e.position.x < 0) {\r\n          velocityX[i] = 5;\r\n        }\r\n      }\r\n    });\r\n\r\n    requestAnimationFrame(renderScene);\r\n\r\n    renderer.render(scene, camera);\r\n    renderer.autoClear = false;\r\n    renderer.render(sceneOrtho, cameraOrtho);\r\n  };\r\n  controls.redraw();\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}