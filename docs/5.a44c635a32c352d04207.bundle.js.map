{"version":3,"file":"5.a44c635a32c352d04207.bundle.js","sources":["webpack:///./src/chapter2/2.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport createMultiMaterialObject from '../utils/createMultiMaterialObject';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/QuickHull';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/geometries/ConvexGeometry';\r\n// import 'imports-loader?THREE=three!../../node_modules/three/examples/js/utils/SceneUtils';\r\n\r\ndeclare module 'three' {\r\n  function ConvexGeometry(points: THREE.Vector3[]): void;\r\n}\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  scene.add(camera);\r\n  camera.position.x = -50;\r\n  camera.position.y = 30;\r\n  camera.position.z = 20;\r\n  camera.lookAt(new THREE.Vector3(-10, 0, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  /* plane */\r\n  const planeGeometry = new THREE.PlaneGeometry(60, 40, 1, 1);\r\n  const planeMaterial = new THREE.MeshLambertMaterial({ color: 0xffffff });\r\n  const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n  plane.receiveShadow = true;\r\n  plane.rotation.x = -0.5 * Math.PI;\r\n  plane.position.x = 0;\r\n  plane.position.y = 0;\r\n  plane.position.z = 0;\r\n  scene.add(plane);\r\n\r\n  /* ambientLight */\r\n  const ambientLight = new THREE.AmbientLight(0x090909);\r\n  scene.add(ambientLight);\r\n\r\n  /* spotLight */\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(-25, 25, 32);\r\n  spotLight.castShadow = true;\r\n  scene.add(spotLight);\r\n\r\n  (argScene => {\r\n    const geoms = [];\r\n    geoms.push(new THREE.CylinderGeometry(1, 4, 4));\r\n    geoms.push(new THREE.BoxGeometry(2, 2, 2));\r\n    geoms.push(new THREE.SphereGeometry(2));\r\n    geoms.push(new THREE.IcosahedronGeometry(4));\r\n    const points = [\r\n      new THREE.Vector3(2, 2, 2),\r\n      new THREE.Vector3(2, 2, -2),\r\n      new THREE.Vector3(-2, 2, -2),\r\n      new THREE.Vector3(-2, 2, 2),\r\n      new THREE.Vector3(2, -2, 2),\r\n      new THREE.Vector3(2, -2, -2),\r\n      new THREE.Vector3(-2, -2, -2),\r\n      new THREE.Vector3(-2, -2, 2)\r\n    ];\r\n    geoms.push(new THREE.ConvexGeometry(points));\r\n\r\n    const pts = [];\r\n    const detail = 0.1;\r\n    const radius = 3;\r\n    for (let angle = 0.0; angle < Math.PI; angle += detail) {\r\n      pts.push(\r\n        new THREE.Vector3(Math.cos(angle) * radius, Math.sin(angle) * radius, 0)\r\n      );\r\n    }\r\n    geoms.push(new THREE.LatheGeometry(pts, 12));\r\n    geoms.push(new THREE.OctahedronGeometry(3));\r\n    geoms.push(\r\n      new THREE.ParametricGeometry(\r\n        (u, t, target) => {\r\n          u *= Math.PI;\r\n          t *= 2 * Math.PI;\r\n          u = u * 2;\r\n          const phi = u / 2;\r\n          const major = 2.25;\r\n          const a = 0.125;\r\n          const b = 0.65;\r\n          let x;\r\n          let y;\r\n          let z;\r\n\r\n          x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\r\n          z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\r\n          y = (major + x) * Math.sin(u);\r\n          x = (major + x) * Math.cos(u);\r\n\r\n          target.set(x, y, z);\r\n        },\r\n        20,\r\n        10\r\n      )\r\n    );\r\n    geoms.push(new THREE.TetrahedronGeometry(3));\r\n    geoms.push(new THREE.TorusGeometry(3, 1, 10, 10));\r\n    geoms.push(new THREE.TorusKnotGeometry(3, 0.5, 50, 20));\r\n\r\n    let j = 0;\r\n    for (let i = 0; i < geoms.length; i++) {\r\n      const materials = [\r\n        new THREE.MeshPhongMaterial({\r\n          color: Math.random() * 0xffffff,\r\n          flatShading: true\r\n        }),\r\n        new THREE.MeshBasicMaterial({\r\n          color: 0x000000,\r\n          wireframe: true\r\n        })\r\n      ];\r\n\r\n      const mesh = createMultiMaterialObject(geoms[i], materials);\r\n      mesh.traverse(e => {\r\n        e.castShadow = true;\r\n      });\r\n      mesh.position.x = -24 + (i % 4) * 12;\r\n      mesh.position.y = 4;\r\n      mesh.position.z = -8 + j * 12;\r\n\r\n      if ((i + 1) % 4 === 0) j++;\r\n      argScene.add(mesh);\r\n    }\r\n  })(scene);\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const stats = (() => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n\r\n    return statsObj;\r\n  })();\r\n\r\n  /* render */\r\n  const render = () => {\r\n    stats.update();\r\n    requestAnimationFrame(render);\r\n    renderer.render(scene, camera);\r\n  };\r\n  render();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}