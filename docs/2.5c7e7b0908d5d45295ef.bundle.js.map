{"version":3,"file":"2.5c7e7b0908d5d45295ef.bundle.js","sources":["webpack:///./src/chapter4/8.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\n\r\ntype ShaderModule = {\r\n  default: string;\r\n};\r\n\r\nconst vertShaderModule: ShaderModule = require('./8.vert');\r\nconst fragmentShader1: ShaderModule = require('./8-1.frag');\r\nconst fragmentShader2: ShaderModule = require('./8-2.frag');\r\nconst fragmentShader3: ShaderModule = require('./8-3.frag');\r\nconst fragmentShader4: ShaderModule = require('./8-4.frag');\r\nconst fragmentShader5: ShaderModule = require('./8-5.frag');\r\nconst fragmentShader6: ShaderModule = require('./8-6.frag');\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    window.innerWidth / window.innerHeight,\r\n    0.1,\r\n    1000\r\n  );\r\n\r\n  camera.position.x = 30;\r\n  camera.position.y = 30;\r\n  camera.position.z = 30;\r\n  camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n  /* renderer */\r\n  const webGLRenderer = new THREE.WebGLRenderer();\r\n  webGLRenderer.setClearColor(new THREE.Color(0x000000));\r\n  webGLRenderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  webGLRenderer.shadowMap.enabled = true;\r\n\r\n  const createMaterial = (vertShader: string, fragShader: string) => {\r\n    const uniforms = {\r\n      time: { type: 'f', value: 0.2 },\r\n      scale: { type: 'f', value: 0.2 },\r\n      alpha: { type: 'f', value: 0.6 },\r\n      resolution: { type: 'v2', value: new THREE.Vector2() }\r\n    };\r\n    uniforms.resolution.value.x = window.innerWidth;\r\n    uniforms.resolution.value.y = window.innerHeight;\r\n    const meshMaterial = new THREE.ShaderMaterial({\r\n      uniforms: uniforms,\r\n      vertexShader: vertShader,\r\n      fragmentShader: fragShader,\r\n      transparent: true\r\n    });\r\n    return meshMaterial;\r\n  };\r\n\r\n  const cubeGeometry = new THREE.BoxGeometry(20, 20, 20);\r\n\r\n  const meshMaterial1 = createMaterial(\r\n    vertShaderModule.default,\r\n    fragmentShader1.default\r\n  );\r\n  const meshMaterial2 = createMaterial(\r\n    vertShaderModule.default,\r\n    fragmentShader2.default\r\n  );\r\n  const meshMaterial3 = createMaterial(\r\n    vertShaderModule.default,\r\n    fragmentShader3.default\r\n  );\r\n  const meshMaterial4 = createMaterial(\r\n    vertShaderModule.default,\r\n    fragmentShader4.default\r\n  );\r\n  const meshMaterial5 = createMaterial(\r\n    vertShaderModule.default,\r\n    fragmentShader5.default\r\n  );\r\n  const meshMaterial6 = createMaterial(\r\n    vertShaderModule.default,\r\n    fragmentShader6.default\r\n  );\r\n  const cube = new THREE.Mesh(cubeGeometry, [\r\n    meshMaterial1,\r\n    meshMaterial2,\r\n    meshMaterial3,\r\n    meshMaterial4,\r\n    meshMaterial5,\r\n    meshMaterial6\r\n  ]);\r\n  // const cube = new THREE.Mesh(cubeGeometry, [\r\n  //   meshMaterial2,\r\n  //   meshMaterial2,\r\n  //   meshMaterial1,\r\n  //   meshMaterial1,\r\n  //   meshMaterial1,\r\n  //   meshMaterial1\r\n  // ]);\r\n  scene.add(cube);\r\n\r\n  const ambientLight = new THREE.AmbientLight(0x0c0c0c);\r\n  scene.add(ambientLight);\r\n\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(-40, 60, -10);\r\n  spotLight.castShadow = true;\r\n  scene.add(spotLight);\r\n\r\n  document.getElementById('WebGL-output').appendChild(webGLRenderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      webGLRenderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    cube.rotation.y = step += 0.01;\r\n    cube.rotation.x = step;\r\n    cube.rotation.z = step;\r\n\r\n    (cube.material as THREE.ShaderMaterial[]).forEach(m => {\r\n      m.uniforms.time.value += 0.01;\r\n    });\r\n    requestAnimationFrame(renderScene);\r\n    webGLRenderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}