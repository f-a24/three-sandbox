{"version":3,"file":"52.5c7e7b0908d5d45295ef.bundle.js","sources":["webpack:///./src/chapter6/7.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  const fonts = {} as { [font: string]: THREE.Font };\r\n  const fontLoader = new THREE.FontLoader();\r\n  fontLoader.load(\r\n    './assets/helvetiker_regular.typeface.js',\r\n    (helvetiker: THREE.Font) => {\r\n      fonts['helvetiker'] = helvetiker;\r\n      fontLoader.load(\r\n        './assets/optimer_regular.typeface.js',\r\n        (optimer: THREE.Font) => {\r\n          fonts['optimer'] = optimer;\r\n\r\n          /* scene */\r\n          const scene = new THREE.Scene();\r\n\r\n          /* camera */\r\n          const camera = new THREE.PerspectiveCamera(\r\n            45,\r\n            VIEWPORT_W / VIEWPORT_H,\r\n            0.1,\r\n            1000\r\n          );\r\n          camera.position.x = 100;\r\n          camera.position.y = 300;\r\n          camera.position.z = 600;\r\n          camera.lookAt(new THREE.Vector3(400, 0, -300));\r\n\r\n          /* renderer */\r\n          const renderer = new THREE.WebGLRenderer();\r\n          renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n          renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n          renderer.shadowMap.enabled = true;\r\n\r\n          /* dirLight */\r\n          const dirLight = new THREE.DirectionalLight();\r\n          dirLight.position.set(25, 23, 15);\r\n          scene.add(dirLight);\r\n\r\n          const dirLight2 = new THREE.DirectionalLight();\r\n          dirLight2.position.set(-25, 23, 15);\r\n          scene.add(dirLight2);\r\n\r\n          document\r\n            .getElementById('WebGL-output')\r\n            .appendChild(renderer.domElement);\r\n\r\n          const createMesh = (geom: THREE.TextGeometry) => {\r\n            const meshMaterial = new THREE.MeshPhongMaterial({\r\n              specular: 0xffffff,\r\n              color: 0xff6666,\r\n              shininess: 100\r\n            });\r\n            const plane = new THREE.Mesh(geom, meshMaterial);\r\n            return plane;\r\n          };\r\n\r\n          /* stats */\r\n          const initStats = () => {\r\n            const statsObj = new Stats();\r\n            statsObj.showPanel(0);\r\n            statsObj.dom.style.position = 'absolute';\r\n            statsObj.dom.style.left = '0px';\r\n            statsObj.dom.style.top = '0px';\r\n            document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n            return statsObj;\r\n          };\r\n          const stats = initStats();\r\n\r\n          let text1: THREE.Mesh;\r\n          let text2: THREE.Mesh;\r\n\r\n          /* gui */\r\n          const controls = {\r\n            size: 90,\r\n            height: 90,\r\n            bevelThickness: 2,\r\n            bevelSize: 0.5,\r\n            bevelEnabled: true,\r\n            bevelSegments: 3,\r\n            curveSegments: 12,\r\n            steps: 1,\r\n            font: 'helvetiker',\r\n            weight: 'normal',\r\n            asGeom: () => {\r\n              scene.remove(text1);\r\n              scene.remove(text2);\r\n              const options = {\r\n                size: controls.size,\r\n                height: controls.height,\r\n                weight: controls.weight,\r\n                font: fonts[controls.font],\r\n                bevelThickness: controls.bevelThickness,\r\n                bevelSize: controls.bevelSize,\r\n                bevelSegments: controls.bevelSegments,\r\n                bevelEnabled: controls.bevelEnabled,\r\n                curveSegments: controls.curveSegments,\r\n                steps: controls.steps\r\n              };\r\n              text1 = createMesh(new THREE.TextGeometry('Learning', options));\r\n              text1.position.z = -100;\r\n              text1.position.y = 100;\r\n              scene.add(text1);\r\n              text2 = createMesh(new THREE.TextGeometry('Three.js', options));\r\n              scene.add(text2);\r\n            }\r\n          };\r\n\r\n          const gui = new dat.GUI();\r\n          gui.add(controls, 'size', 0, 200).onChange(controls.asGeom);\r\n          gui.add(controls, 'height', 0, 200).onChange(controls.asGeom);\r\n          gui\r\n            .add(controls, 'font', ['optimer', 'helvetiker'])\r\n            .onChange(controls.asGeom);\r\n          gui.add(controls, 'bevelThickness', 0, 10).onChange(controls.asGeom);\r\n          gui.add(controls, 'bevelSize', 0, 10).onChange(controls.asGeom);\r\n          gui\r\n            .add(controls, 'bevelSegments', 0, 30)\r\n            .step(1)\r\n            .onChange(controls.asGeom);\r\n          gui.add(controls, 'bevelEnabled').onChange(controls.asGeom);\r\n          gui\r\n            .add(controls, 'curveSegments', 1, 30)\r\n            .step(1)\r\n            .onChange(controls.asGeom);\r\n          gui\r\n            .add(controls, 'steps', 1, 5)\r\n            .step(1)\r\n            .onChange(controls.asGeom);\r\n\r\n          controls.asGeom();\r\n\r\n          /* render */\r\n          const renderScene = () => {\r\n            stats.update();\r\n\r\n            requestAnimationFrame(renderScene);\r\n            renderer.render(scene, camera);\r\n          };\r\n          renderScene();\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}