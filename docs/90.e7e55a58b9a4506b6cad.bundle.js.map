{"version":3,"file":"90.e7e55a58b9a4506b6cad.bundle.js","sources":["webpack:///./src/chapter9/4.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as TWEEN from '@tweenjs/tween.js';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/loaders/PLYLoader.js';\r\nimport * as chroma from 'chroma-js';\r\nimport { OBJLoader } from '../../node_modules/three/examples/jsm/loaders/OBJLoader';\r\nimport { MTLLoader } from '../../node_modules/three/examples/jsm/loaders/MTLLoader';\r\nimport { TrackballControls } from '../../node_modules/three/examples/jsm/controls/TrackballControls';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = 100;\r\n  camera.position.y = 100;\r\n  camera.position.z = 300;\r\n  camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0x000000));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  /* trackballControls */\r\n  const trackballControls = new TrackballControls(camera);\r\n  trackballControls.rotateSpeed = 1.0;\r\n  trackballControls.zoomSpeed = 1.0;\r\n  trackballControls.panSpeed = 1.0;\r\n  trackballControls.staticMoving = true;\r\n\r\n  // ambientLight\r\n  const ambientLight = new THREE.AmbientLight(0x383838);\r\n  scene.add(ambientLight);\r\n\r\n  // spotlight\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(300, 300, 300);\r\n  spotLight.intensity = 1;\r\n  scene.add(spotLight);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  const setRandomColors = (\r\n    object: THREE.Group | THREE.Mesh,\r\n    scale: chroma.Scale<chroma.Color>\r\n  ) => {\r\n    const children = object.children;\r\n    if (children && children.length > 0) {\r\n      children.forEach((e: THREE.Mesh) => {\r\n        setRandomColors(e, scale);\r\n      });\r\n    } else {\r\n      if (object instanceof THREE.Mesh) {\r\n        _setRandomColors(object.material, scale);\r\n      }\r\n    }\r\n  };\r\n\r\n  const _setRandomColors = (\r\n    material: THREE.MultiMaterial | any,\r\n    scale: chroma.Scale<chroma.Color>\r\n  ) => {\r\n    if (material instanceof THREE.MultiMaterial) {\r\n      material.materials.forEach(mat => {\r\n        _setRandomColors(mat, scale);\r\n      });\r\n    } else {\r\n      console.log('*****', material.color);\r\n      material.color = new THREE.Color(scale(Math.random()).hex());\r\n      if (material.name && material.name.indexOf('building') == 0) {\r\n        material.emissive = new THREE.Color(0x444444);\r\n        material.transparent = true;\r\n        material.opacity = 0.8;\r\n      }\r\n    }\r\n  };\r\n\r\n  let mesh: THREE.Group;\r\n  const load = (object: THREE.Group) => {\r\n    const scale = chroma.scale(['red', 'green', 'blue']);\r\n    setRandomColors(object, scale);\r\n    mesh = object;\r\n    scene.add(mesh);\r\n  };\r\n\r\n  const mtlLoader = new MTLLoader();\r\n  mtlLoader.load('./assets/city.mtl', materials => {\r\n    materials.preload();\r\n    const objLoader = new OBJLoader();\r\n    objLoader.setMaterials(materials);\r\n    objLoader.load('./assets/city.obj', load);\r\n  });\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  const renderScene = () => {\r\n    stats.update();\r\n    trackballControls.update();\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}