{"version":3,"file":"12.f48b93ed6205ae3d8d7b.bundle.js","sources":["webpack:///./src/chapter5/10.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nimport createMultiMaterialObject from '../utils/createMultiMaterialObject';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 50;\r\n  camera.lookAt(new THREE.Vector3(10, 0, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  const createMesh = (geom: THREE.Geometry) => {\r\n    const meshMaterial = new THREE.MeshNormalMaterial();\r\n    meshMaterial.side = THREE.DoubleSide;\r\n    const mesh = createMultiMaterialObject(geom, [meshMaterial]);\r\n    return mesh;\r\n  };\r\n\r\n  /* knot */\r\n  let knot = createMesh(new THREE.TorusKnotGeometry(10, 1, 64, 8, 2, 3));\r\n  scene.add(knot);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    radius: ((knot.children[0] as THREE.Mesh)\r\n      .geometry as THREE.TorusKnotBufferGeometry).parameters.radius,\r\n    tube: 0.3,\r\n    radialSegments: 100,\r\n    tubularSegments: 20,\r\n    p: ((knot.children[0] as THREE.Mesh)\r\n      .geometry as THREE.TorusKnotBufferGeometry).parameters.p,\r\n    q: ((knot.children[0] as THREE.Mesh)\r\n      .geometry as THREE.TorusKnotBufferGeometry).parameters.q,\r\n    redraw: () => {\r\n      scene.remove(knot);\r\n      knot = createMesh(\r\n        new THREE.TorusKnotGeometry(\r\n          controls.radius,\r\n          controls.tube,\r\n          Math.round(controls.radialSegments),\r\n          Math.round(controls.tubularSegments),\r\n          Math.round(controls.p),\r\n          Math.round(controls.q)\r\n        )\r\n      );\r\n      scene.add(knot);\r\n    }\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'radius', 0, 40).onChange(controls.redraw);\r\n  gui.add(controls, 'tube', 0, 40).onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'radialSegments', 0, 400)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'tubularSegments', 1, 20)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'p', 1, 10)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'q', 1, 15)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    knot.rotation.y = step += 0.01;\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}