{"version":3,"file":"72.e7e55a58b9a4506b6cad.bundle.js","sources":["webpack:///./node_modules/three/examples/jsm/loaders/PDBLoader.js"],"sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nimport {\n\tBufferGeometry,\n\tDefaultLoadingManager,\n\tFileLoader,\n\tFloat32BufferAttribute\n} from \"../../../build/three.module.js\";\n\nvar PDBLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n};\n\nPDBLoader.prototype = {\n\n\tconstructor: PDBLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t},\n\n\t// Based on CanvasMol PDB parser\n\n\tparse: function ( text ) {\n\n\t\tfunction trim( text ) {\n\n\t\t\treturn text.replace( /^\\s\\s*/, '' ).replace( /\\s\\s*$/, '' );\n\n\t\t}\n\n\t\tfunction capitalize( text ) {\n\n\t\t\treturn text.charAt( 0 ).toUpperCase() + text.substr( 1 ).toLowerCase();\n\n\t\t}\n\n\t\tfunction hash( s, e ) {\n\n\t\t\treturn 's' + Math.min( s, e ) + 'e' + Math.max( s, e );\n\n\t\t}\n\n\t\tfunction parseBond( start, length ) {\n\n\t\t\tvar eatom = parseInt( lines[ i ].substr( start, length ) );\n\n\t\t\tif ( eatom ) {\n\n\t\t\t\tvar h = hash( satom, eatom );\n\n\t\t\t\tif ( bhash[ h ] === undefined ) {\n\n\t\t\t\t\tbonds.push( [ satom - 1, eatom - 1, 1 ] );\n\t\t\t\t\tbhash[ h ] = bonds.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// doesn't really work as almost all PDBs\n\t\t\t\t\t// have just normal bonds appearing multiple\n\t\t\t\t\t// times instead of being double/triple bonds\n\t\t\t\t\t// bonds[bhash[h]][2] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildGeometry() {\n\n\t\t\tvar build = {\n\t\t\t\tgeometryAtoms: new BufferGeometry(),\n\t\t\t\tgeometryBonds: new BufferGeometry(),\n\t\t\t\tjson: {\n\t\t\t\t\tatoms: atoms,\n\t\t\t\t\tbonds: bonds\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar geometryAtoms = build.geometryAtoms;\n\t\t\tvar geometryBonds = build.geometryBonds;\n\n\t\t\tvar i, l;\n\n\t\t\tvar verticesAtoms = [];\n\t\t\tvar colorsAtoms = [];\n\t\t\tvar verticesBonds = [];\n\n\t\t\t// atoms\n\n\t\t\tfor ( i = 0, l = atoms.length; i < l; i ++ ) {\n\n\t\t\t\tvar atom = atoms[ i ];\n\n\t\t\t\tvar x = atom[ 0 ];\n\t\t\t\tvar y = atom[ 1 ];\n\t\t\t\tvar z = atom[ 2 ];\n\n\t\t\t\tverticesAtoms.push( x, y, z );\n\n\t\t\t\tvar r = atom[ 3 ][ 0 ] / 255;\n\t\t\t\tvar g = atom[ 3 ][ 1 ] / 255;\n\t\t\t\tvar b = atom[ 3 ][ 2 ] / 255;\n\n\t\t\t\tcolorsAtoms.push( r, g, b );\n\n\t\t\t}\n\n\t\t\t// bonds\n\n\t\t\tfor ( i = 0, l = bonds.length; i < l; i ++ ) {\n\n\t\t\t\tvar bond = bonds[ i ];\n\n\t\t\t\tvar start = bond[ 0 ];\n\t\t\t\tvar end = bond[ 1 ];\n\n\t\t\t\tverticesBonds.push( verticesAtoms[ ( start * 3 ) + 0 ] );\n\t\t\t\tverticesBonds.push( verticesAtoms[ ( start * 3 ) + 1 ] );\n\t\t\t\tverticesBonds.push( verticesAtoms[ ( start * 3 ) + 2 ] );\n\n\t\t\t\tverticesBonds.push( verticesAtoms[ ( end * 3 ) + 0 ] );\n\t\t\t\tverticesBonds.push( verticesAtoms[ ( end * 3 ) + 1 ] );\n\t\t\t\tverticesBonds.push( verticesAtoms[ ( end * 3 ) + 2 ] );\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tgeometryAtoms.addAttribute( 'position', new Float32BufferAttribute( verticesAtoms, 3 ) );\n\t\t\tgeometryAtoms.addAttribute( 'color', new Float32BufferAttribute( colorsAtoms, 3 ) );\n\n\t\t\tgeometryBonds.addAttribute( 'position', new Float32BufferAttribute( verticesBonds, 3 ) );\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tvar CPK = { h: [ 255, 255, 255 ], he: [ 217, 255, 255 ], li: [ 204, 128, 255 ], be: [ 194, 255, 0 ], b: [ 255, 181, 181 ], c: [ 144, 144, 144 ], n: [ 48, 80, 248 ], o: [ 255, 13, 13 ], f: [ 144, 224, 80 ], ne: [ 179, 227, 245 ], na: [ 171, 92, 242 ], mg: [ 138, 255, 0 ], al: [ 191, 166, 166 ], si: [ 240, 200, 160 ], p: [ 255, 128, 0 ], s: [ 255, 255, 48 ], cl: [ 31, 240, 31 ], ar: [ 128, 209, 227 ], k: [ 143, 64, 212 ], ca: [ 61, 255, 0 ], sc: [ 230, 230, 230 ], ti: [ 191, 194, 199 ], v: [ 166, 166, 171 ], cr: [ 138, 153, 199 ], mn: [ 156, 122, 199 ], fe: [ 224, 102, 51 ], co: [ 240, 144, 160 ], ni: [ 80, 208, 80 ], cu: [ 200, 128, 51 ], zn: [ 125, 128, 176 ], ga: [ 194, 143, 143 ], ge: [ 102, 143, 143 ], as: [ 189, 128, 227 ], se: [ 255, 161, 0 ], br: [ 166, 41, 41 ], kr: [ 92, 184, 209 ], rb: [ 112, 46, 176 ], sr: [ 0, 255, 0 ], y: [ 148, 255, 255 ], zr: [ 148, 224, 224 ], nb: [ 115, 194, 201 ], mo: [ 84, 181, 181 ], tc: [ 59, 158, 158 ], ru: [ 36, 143, 143 ], rh: [ 10, 125, 140 ], pd: [ 0, 105, 133 ], ag: [ 192, 192, 192 ], cd: [ 255, 217, 143 ], in: [ 166, 117, 115 ], sn: [ 102, 128, 128 ], sb: [ 158, 99, 181 ], te: [ 212, 122, 0 ], i: [ 148, 0, 148 ], xe: [ 66, 158, 176 ], cs: [ 87, 23, 143 ], ba: [ 0, 201, 0 ], la: [ 112, 212, 255 ], ce: [ 255, 255, 199 ], pr: [ 217, 255, 199 ], nd: [ 199, 255, 199 ], pm: [ 163, 255, 199 ], sm: [ 143, 255, 199 ], eu: [ 97, 255, 199 ], gd: [ 69, 255, 199 ], tb: [ 48, 255, 199 ], dy: [ 31, 255, 199 ], ho: [ 0, 255, 156 ], er: [ 0, 230, 117 ], tm: [ 0, 212, 82 ], yb: [ 0, 191, 56 ], lu: [ 0, 171, 36 ], hf: [ 77, 194, 255 ], ta: [ 77, 166, 255 ], w: [ 33, 148, 214 ], re: [ 38, 125, 171 ], os: [ 38, 102, 150 ], ir: [ 23, 84, 135 ], pt: [ 208, 208, 224 ], au: [ 255, 209, 35 ], hg: [ 184, 184, 208 ], tl: [ 166, 84, 77 ], pb: [ 87, 89, 97 ], bi: [ 158, 79, 181 ], po: [ 171, 92, 0 ], at: [ 117, 79, 69 ], rn: [ 66, 130, 150 ], fr: [ 66, 0, 102 ], ra: [ 0, 125, 0 ], ac: [ 112, 171, 250 ], th: [ 0, 186, 255 ], pa: [ 0, 161, 255 ], u: [ 0, 143, 255 ], np: [ 0, 128, 255 ], pu: [ 0, 107, 255 ], am: [ 84, 92, 242 ], cm: [ 120, 92, 227 ], bk: [ 138, 79, 227 ], cf: [ 161, 54, 212 ], es: [ 179, 31, 212 ], fm: [ 179, 31, 186 ], md: [ 179, 13, 166 ], no: [ 189, 13, 135 ], lr: [ 199, 0, 102 ], rf: [ 204, 0, 89 ], db: [ 209, 0, 79 ], sg: [ 217, 0, 69 ], bh: [ 224, 0, 56 ], hs: [ 230, 0, 46 ], mt: [ 235, 0, 38 ], ds: [ 235, 0, 38 ], rg: [ 235, 0, 38 ], cn: [ 235, 0, 38 ], uut: [ 235, 0, 38 ], uuq: [ 235, 0, 38 ], uup: [ 235, 0, 38 ], uuh: [ 235, 0, 38 ], uus: [ 235, 0, 38 ], uuo: [ 235, 0, 38 ] };\n\n\t\tvar atoms = [];\n\t\tvar bonds = [];\n\t\tvar histogram = {};\n\n\t\tvar bhash = {};\n\n\t\tvar x, y, z, index, e;\n\n\t\t// parse\n\n\t\tvar lines = text.split( '\\n' );\n\n\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\tif ( lines[ i ].substr( 0, 4 ) === 'ATOM' || lines[ i ].substr( 0, 6 ) === 'HETATM' ) {\n\n\t\t\t\tx = parseFloat( lines[ i ].substr( 30, 7 ) );\n\t\t\t\ty = parseFloat( lines[ i ].substr( 38, 7 ) );\n\t\t\t\tz = parseFloat( lines[ i ].substr( 46, 7 ) );\n\t\t\t\tindex = parseInt( lines[ i ].substr( 6, 5 ) ) - 1;\n\n\t\t\t\te = trim( lines[ i ].substr( 76, 2 ) ).toLowerCase();\n\n\t\t\t\tif ( e === '' ) {\n\n\t\t\t\t\te = trim( lines[ i ].substr( 12, 2 ) ).toLowerCase();\n\n\t\t\t\t}\n\n\t\t\t\tatoms[ index ] = [ x, y, z, CPK[ e ], capitalize( e ) ];\n\n\t\t\t\tif ( histogram[ e ] === undefined ) {\n\n\t\t\t\t\thistogram[ e ] = 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thistogram[ e ] += 1;\n\n\t\t\t\t}\n\n\t\t\t} else if ( lines[ i ].substr( 0, 6 ) === 'CONECT' ) {\n\n\t\t\t\tvar satom = parseInt( lines[ i ].substr( 6, 5 ) );\n\n\t\t\t\tparseBond( 11, 5 );\n\t\t\t\tparseBond( 16, 5 );\n\t\t\t\tparseBond( 21, 5 );\n\t\t\t\tparseBond( 26, 5 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build and return geometry\n\n\t\treturn buildGeometry();\n\n\t}\n\n};\n\nexport { PDBLoader };\n"],"mappings":"AAYA","sourceRoot":""}