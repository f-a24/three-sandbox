{"version":3,"file":"17.54c1f27828cf1f55e792.bundle.js","sources":["webpack:///./src/chapter8/11.ts"],"sourcesContent":["/**\r\n * TODO\r\n */\r\nimport * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/loaders/PDBLoader.js';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = 6;\r\n  camera.position.y = 6;\r\n  camera.position.z = 6;\r\n  camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0x000000));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  const dir1 = new THREE.DirectionalLight(0.4);\r\n  dir1.position.set(-30, 30, -30);\r\n  scene.add(dir1);\r\n\r\n  const dir2 = new THREE.DirectionalLight(0.4);\r\n  dir2.position.set(-30, 30, 30);\r\n  scene.add(dir2);\r\n\r\n  const dir3 = new THREE.DirectionalLight(0.4);\r\n  dir3.position.set(30, 30, -30);\r\n  scene.add(dir3);\r\n\r\n  // spotlight\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(30, 30, 30);\r\n  scene.add(spotLight);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  const loader = new (THREE as any).PDBLoader();\r\n  let group = new THREE.Group();\r\n  loader.load(\r\n    './assets/aspirin.pdb',\r\n    ({\r\n      geometryAtoms,\r\n      geometryBonds,\r\n      json\r\n    }: {\r\n      geometryAtoms: THREE.BufferGeometry;\r\n      geometryBonds: THREE.BufferGeometry;\r\n      json: {\r\n        atoms: [number, number, number, number[], string][];\r\n        bonds: [number[]];\r\n      };\r\n    }) => {\r\n      const atomsPositions = geometryAtoms.getAttribute('position');\r\n      const bondsPositions = geometryBonds.getAttribute('position');\r\n      json.atoms.forEach((atom, i) => {\r\n        const sphere = new THREE.SphereGeometry(0.2);\r\n        const material = new THREE.MeshPhongMaterial({\r\n          color: new THREE.Color(\r\n            `rgb(${atom[3][0]},${atom[3][1]},${atom[3][2]})`\r\n          )\r\n        });\r\n        const mesh = new THREE.Mesh(sphere, material);\r\n        mesh.position.set(\r\n          atomsPositions.getX[i],\r\n          atomsPositions.getY[i],\r\n          atomsPositions.getZ[i]\r\n        );\r\n        group.add(mesh);\r\n      });\r\n      for (let j = 0; j < json.bonds.length; j += 2) {\r\n        const path = new THREE.CatmullRomCurve3([\r\n          new THREE.Vector3(\r\n            bondsPositions.getX[j],\r\n            bondsPositions.getY[j],\r\n            bondsPositions.getZ[j]\r\n          ),\r\n          new THREE.Vector3(\r\n            bondsPositions.getX[j + 1],\r\n            bondsPositions.getY[j + 1],\r\n            bondsPositions.getZ[j + 1]\r\n          )\r\n        ]);\r\n        const tube = new THREE.TubeGeometry(path, 1, 0.04);\r\n        const material = new THREE.MeshPhongMaterial({ color: 0xcccccc });\r\n        const mesh = new THREE.Mesh(tube, material);\r\n        group.add(mesh);\r\n      }\r\n      scene.add(group);\r\n    }\r\n  );\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    if (group) {\r\n      group.rotation.y += 0.006;\r\n    }\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}