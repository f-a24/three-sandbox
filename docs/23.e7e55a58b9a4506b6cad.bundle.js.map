{"version":3,"file":"23.e7e55a58b9a4506b6cad.bundle.js","sources":["webpack:///./src/chapter4/3.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nimport createMultiMaterialObject from '../utils/createMultiMaterialObject';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    window.innerWidth / window.innerHeight,\r\n    30,\r\n    170\r\n  );\r\n\r\n  camera.position.x = -50;\r\n  camera.position.y = 40;\r\n  camera.position.z = 50;\r\n  camera.lookAt(scene.position);\r\n\r\n  /* renderer */\r\n  const webGLRenderer = new THREE.WebGLRenderer();\r\n  webGLRenderer.sortObjects = false;\r\n  webGLRenderer.setClearColor(new THREE.Color(0x00000));\r\n  webGLRenderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  webGLRenderer.shadowMap.enabled = true;\r\n\r\n  document.getElementById('WebGL-output').appendChild(webGLRenderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    cameraNear: camera.near,\r\n    cameraFar: camera.far,\r\n    rotationSpeed: 0.02,\r\n    numberOfObjects: scene.children.length,\r\n    color: 0x00ff00,\r\n    removeCube: () => {\r\n      const allChildren = scene.children;\r\n      const lastObject = allChildren[allChildren.length - 1];\r\n      if (lastObject instanceof THREE.Mesh) {\r\n        scene.remove(lastObject);\r\n        controls.numberOfObjects = scene.children.length;\r\n      }\r\n    },\r\n    addCube: () => {\r\n      const cubeSize = Math.ceil(3 + Math.random() * 3);\r\n      const cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);\r\n      const cubeMaterial = new THREE.MeshDepthMaterial();\r\n      const colorMaterial = new THREE.MeshBasicMaterial({\r\n        color: controls.color,\r\n        transparent: true,\r\n        blending: THREE.MultiplyBlending\r\n      });\r\n      const cube = createMultiMaterialObject(cubeGeometry, [\r\n        colorMaterial,\r\n        cubeMaterial\r\n      ]);\r\n      cube.children[1].scale.set(0.99, 0.99, 0.99);\r\n      cube.castShadow = true;\r\n      cube.position.x = -60 + Math.round(Math.random() * 100);\r\n      cube.position.y = Math.round(Math.random() * 10);\r\n      cube.position.z = -100 + Math.round(Math.random() * 150);\r\n      scene.add(cube);\r\n      controls.numberOfObjects = scene.children.length;\r\n    },\r\n    outputObjects: () => {\r\n      console.log(scene.children);\r\n    }\r\n  };\r\n\r\n  const gui = new dat.GUI();\r\n  gui.addColor(controls, 'color');\r\n  gui.add(controls, 'rotationSpeed', 0, 0.5);\r\n  gui.add(controls, 'addCube');\r\n  gui.add(controls, 'removeCube');\r\n  gui.add(controls, 'cameraNear', 0, 50).onChange((e: number) => {\r\n    camera.near = e;\r\n    camera.updateProjectionMatrix();\r\n  });\r\n  gui.add(controls, 'cameraFar', 100, 300).onChange((e: number) => {\r\n    camera.far = e;\r\n    camera.updateProjectionMatrix();\r\n  });\r\n\r\n  for (let i = 0; i < 10; i++) {\r\n    controls.addCube();\r\n  }\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      webGLRenderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    scene.traverse((e: THREE.Mesh) => {\r\n      if (e instanceof THREE.Mesh) {\r\n        e.rotation.x += controls.rotationSpeed;\r\n        e.rotation.y += controls.rotationSpeed;\r\n        e.rotation.z += controls.rotationSpeed;\r\n      }\r\n    });\r\n\r\n    requestAnimationFrame(renderScene);\r\n    webGLRenderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}