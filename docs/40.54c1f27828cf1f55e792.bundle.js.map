{"version":3,"file":"40.54c1f27828cf1f55e792.bundle.js","sources":["webpack:///./src/chapter6/2.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nimport createMultiMaterialObject from '../utils/createMultiMaterialObject';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 50;\r\n  camera.lookAt(new THREE.Vector3(10, 0, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  let spGroup: THREE.Group;\r\n  let latheMesh: THREE.Group;\r\n  const generatePoints = (\r\n    segments: number,\r\n    phiStart: number,\r\n    phiLength: number\r\n  ) => {\r\n    const points = <THREE.Vector2[]>[];\r\n    const height = 5;\r\n    const count = 30;\r\n    for (let i = 0; i < count; i++) {\r\n      points.push(\r\n        new THREE.Vector2(\r\n          (Math.sin(i * 0.2) + Math.cos(i * 0.3)) * height + 12,\r\n          i - count + count / 2\r\n        )\r\n      );\r\n    }\r\n    spGroup = new THREE.Group();\r\n    spGroup.rotation.y = -Math.PI / 2;\r\n    const material = new THREE.MeshBasicMaterial({\r\n      color: 0xff0000,\r\n      transparent: false\r\n    });\r\n    points.forEach(point => {\r\n      const spGeom = new THREE.SphereGeometry(0.2);\r\n      const spMesh = new THREE.Mesh(spGeom, material);\r\n      spMesh.position.set(point.x, point.y, 0);\r\n      spGroup.add(spMesh);\r\n    });\r\n    scene.add(spGroup);\r\n    const latheGeometry = new THREE.LatheGeometry(\r\n      points,\r\n      segments,\r\n      phiStart,\r\n      phiLength\r\n    );\r\n    latheMesh = createMesh(latheGeometry);\r\n    scene.add(latheMesh);\r\n  };\r\n\r\n  const createMesh = (geom: THREE.Geometry) => {\r\n    const meshMaterial = new THREE.MeshNormalMaterial();\r\n    meshMaterial.side = THREE.DoubleSide;\r\n    const wireFrameMat = new THREE.MeshBasicMaterial();\r\n    wireFrameMat.wireframe = true;\r\n    const mesh = createMultiMaterialObject(geom, [meshMaterial, wireFrameMat]);\r\n    return mesh;\r\n  };\r\n\r\n  /* generatePoints */\r\n  generatePoints(12, 0, 2 * Math.PI);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    segments: 12,\r\n    phiStart: 0,\r\n    phiLength: 2 * Math.PI,\r\n    redraw: () => {\r\n      scene.remove(spGroup);\r\n      scene.remove(latheMesh);\r\n      generatePoints(controls.segments, controls.phiStart, controls.phiLength);\r\n    }\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui\r\n    .add(controls, 'segments', 0, 50)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui.add(controls, 'phiStart', 0, 2 * Math.PI).onChange(controls.redraw);\r\n  gui.add(controls, 'phiLength', 0, 2 * Math.PI).onChange(controls.redraw);\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    spGroup.rotation.x = step;\r\n    latheMesh.rotation.x = step += 0.01;\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}