{"version":3,"file":"61.3c5fc071e544c77027a1.bundle.js","sources":["webpack:///./src/chapter4/9.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    window.innerWidth / window.innerHeight,\r\n    0.1,\r\n    1000\r\n  );\r\n\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 30;\r\n  camera.lookAt(scene.position);\r\n\r\n  /* renderer */\r\n  const webGLRenderer = new THREE.WebGLRenderer();\r\n  webGLRenderer.setClearColor(new THREE.Color(0x000000));\r\n  webGLRenderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  webGLRenderer.shadowMap.enabled = true;\r\n\r\n  const ambientLight = new THREE.AmbientLight(0x0c0c0c);\r\n  scene.add(ambientLight);\r\n\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(-40, 60, -10);\r\n  spotLight.castShadow = true;\r\n  spotLight.intensity = 0.6;\r\n  scene.add(spotLight);\r\n\r\n  const gosper = (a: number, b: number) => {\r\n    const turtle = [0, 0, 0];\r\n    const points = <{ x: number; y: number; z: number }[]>[];\r\n    const count = 0;\r\n    const rt = (x: number) => {\r\n      turtle[2] += x;\r\n    };\r\n    const lt = (x: number) => {\r\n      turtle[2] -= x;\r\n    };\r\n    const fd = (dist: number) => {\r\n      points.push({ x: turtle[0], y: turtle[1], z: Math.sin(count) * 5 });\r\n      var dir = turtle[2] * (Math.PI / 180);\r\n      turtle[0] += Math.cos(dir) * dist;\r\n      turtle[1] += Math.sin(dir) * dist;\r\n      points.push({ x: turtle[0], y: turtle[1], z: Math.sin(count) * 5 });\r\n    };\r\n    const rg = (st: number, ln: number, turtle: number[]) => {\r\n      st--;\r\n      ln = ln / 2.6457;\r\n      if (st > 0) {\r\n        rg(st, ln, turtle);\r\n        rt(60);\r\n        gl(st, ln, turtle);\r\n        rt(120);\r\n        gl(st, ln, turtle);\r\n        lt(60);\r\n        rg(st, ln, turtle);\r\n        lt(120);\r\n        rg(st, ln, turtle);\r\n        rg(st, ln, turtle);\r\n        lt(60);\r\n        gl(st, ln, turtle);\r\n        rt(60);\r\n      }\r\n      if (st == 0) {\r\n        fd(ln);\r\n        rt(60);\r\n        fd(ln);\r\n        rt(120);\r\n        fd(ln);\r\n        lt(60);\r\n        fd(ln);\r\n        lt(120);\r\n        fd(ln);\r\n        fd(ln);\r\n        lt(60);\r\n        fd(ln);\r\n        rt(60);\r\n      }\r\n    };\r\n    const gl = (st: number, ln: number, turtle: number[]) => {\r\n      st--;\r\n      ln = ln / 2.6457;\r\n      if (st > 0) {\r\n        lt(60);\r\n        rg(st, ln, turtle);\r\n        rt(60);\r\n        gl(st, ln, turtle);\r\n        gl(st, ln, turtle);\r\n        rt(120);\r\n        gl(st, ln, turtle);\r\n        rt(60);\r\n        rg(st, ln, turtle);\r\n        lt(120);\r\n        rg(st, ln, turtle);\r\n        lt(60);\r\n        gl(st, ln, turtle);\r\n      }\r\n      if (st == 0) {\r\n        lt(60);\r\n        fd(ln);\r\n        rt(60);\r\n        fd(ln);\r\n        fd(ln);\r\n        rt(120);\r\n        fd(ln);\r\n        rt(60);\r\n        fd(ln);\r\n        lt(120);\r\n        fd(ln);\r\n        lt(60);\r\n        fd(ln);\r\n      }\r\n    };\r\n    rg(a, b, turtle);\r\n    return points;\r\n  };\r\n\r\n  const points = gosper(4, 60);\r\n\r\n  const lines = new THREE.Geometry();\r\n  const colors = <THREE.Color[]>[];\r\n  let i = 0;\r\n  points.forEach(function(e) {\r\n    lines.vertices.push(new THREE.Vector3(e.x, e.z, e.y));\r\n    colors[i] = new THREE.Color(0xffffff);\r\n    colors[i].setHSL(e.x / 100 + 0.5, (e.y * 20) / 300, 0.8);\r\n    i++;\r\n  });\r\n  lines.colors = colors;\r\n  const material = new THREE.LineBasicMaterial({\r\n    opacity: 1.0,\r\n    linewidth: 1,\r\n    vertexColors: THREE.VertexColors\r\n  });\r\n  const line = new THREE.Line(lines, material);\r\n  line.position.set(25, -30, -60);\r\n  scene.add(line);\r\n\r\n  document.getElementById('WebGL-output').appendChild(webGLRenderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      webGLRenderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    line.rotation.z = step += 0.01;\r\n\r\n    requestAnimationFrame(renderScene);\r\n    webGLRenderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}