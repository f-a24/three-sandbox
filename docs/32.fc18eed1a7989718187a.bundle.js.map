{"version":3,"file":"32.fc18eed1a7989718187a.bundle.js","sources":["webpack:///./src/chapter2/4.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  scene.add(camera);\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 30;\r\n  camera.lookAt(scene.position);\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  /* plane */\r\n  const planeGeometry = new THREE.PlaneGeometry(60, 40, 1, 1);\r\n  const planeMaterial = new THREE.MeshLambertMaterial({ color: 0xffffff });\r\n  const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n  plane.receiveShadow = true;\r\n  plane.rotation.x = -0.5 * Math.PI;\r\n  plane.position.x = 0;\r\n  plane.position.y = 0;\r\n  plane.position.z = 0;\r\n  scene.add(plane);\r\n\r\n  /* ambientLight */\r\n  const ambientLight = new THREE.AmbientLight(0x0c0c0c);\r\n  scene.add(ambientLight);\r\n\r\n  /* spotLight */\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(-20, 30, 10);\r\n  spotLight.castShadow = true;\r\n  scene.add(spotLight);\r\n\r\n  const material = new THREE.MeshLambertMaterial({ color: 0x44ff44 });\r\n  const geom = new THREE.BoxGeometry(5, 8, 3);\r\n  const cube = new THREE.Mesh(geom, material);\r\n  cube.position.y = 4;\r\n  cube.castShadow = true;\r\n  scene.add(cube);\r\n\r\n  const controls = {\r\n    scaleX: 1,\r\n    scaleY: 1,\r\n    scaleZ: 1,\r\n    positionX: 0,\r\n    positionY: 4,\r\n    positionZ: 0,\r\n    rotationX: 0,\r\n    rotationY: 0,\r\n    rotationZ: 0,\r\n    scale: 1,\r\n    translateX: 0,\r\n    translateY: 0,\r\n    translateZ: 0,\r\n    visible: true,\r\n    translate: () => {\r\n      cube.translateX(controls.translateX);\r\n      cube.translateY(controls.translateY);\r\n      cube.translateZ(controls.translateZ);\r\n      controls.positionX = cube.position.x;\r\n      controls.positionY = cube.position.y;\r\n      controls.positionZ = cube.position.z;\r\n    }\r\n  };\r\n  const gui = new dat.GUI();\r\n  const guiScale = gui.addFolder('scale');\r\n  guiScale.add(controls, 'scaleX', 0, 5);\r\n  guiScale.add(controls, 'scaleY', 0, 5);\r\n  guiScale.add(controls, 'scaleZ', 0, 5);\r\n\r\n  const guiPosition = gui.addFolder('position');\r\n  const contX = guiPosition.add(controls, 'positionX', -10, 10);\r\n  const contY = guiPosition.add(controls, 'positionY', -4, 20);\r\n  const contZ = guiPosition.add(controls, 'positionZ', -10, 10);\r\n\r\n  contX.listen();\r\n  contX.onChange(() => {\r\n    cube.position.x = controls.positionX;\r\n  });\r\n  contY.listen();\r\n  contY.onChange(() => {\r\n    cube.position.y = controls.positionY;\r\n  });\r\n  contZ.listen();\r\n  contZ.onChange(() => {\r\n    cube.position.z = controls.positionZ;\r\n  });\r\n\r\n  const guiRotation = gui.addFolder('rotation');\r\n  guiRotation.add(controls, 'rotationX', -4, 4);\r\n  guiRotation.add(controls, 'rotationY', -4, 4);\r\n  guiRotation.add(controls, 'rotationZ', -4, 4);\r\n\r\n  const guiTranslate = gui.addFolder('translate');\r\n  guiTranslate.add(controls, 'translateX', -10, 10);\r\n  guiTranslate.add(controls, 'translateY', -10, 10);\r\n  guiTranslate.add(controls, 'translateZ', -10, 10);\r\n  guiTranslate.add(controls, 'translate');\r\n\r\n  gui.add(controls, 'visible');\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const stats = (() => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n\r\n    return statsObj;\r\n  })();\r\n\r\n  /* render */\r\n  const render = () => {\r\n    stats.update();\r\n    cube.visible = controls.visible;\r\n    cube.rotation.x = controls.rotationX;\r\n    cube.rotation.y = controls.rotationY;\r\n    cube.rotation.z = controls.rotationZ;\r\n    cube.scale.set(controls.scaleX, controls.scaleY, controls.scaleZ);\r\n    requestAnimationFrame(render);\r\n    renderer.render(scene, camera);\r\n  };\r\n  render();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}