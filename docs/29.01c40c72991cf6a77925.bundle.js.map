{"version":3,"file":"29.01c40c72991cf6a77925.bundle.js","sources":["webpack:///./src/chapter2/1.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n  scene.fog = new THREE.Fog(0xffffff, 0.015, 100);\r\n  scene.overrideMaterial = new THREE.MeshLambertMaterial({\r\n    color: 0xffffff\r\n  });\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  scene.add(camera);\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 30;\r\n  camera.lookAt(scene.position);\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  /* plane */\r\n  const planeGeometry = new THREE.PlaneGeometry(60, 40, 1, 1);\r\n  const planeMaterial = new THREE.MeshLambertMaterial({ color: 0xffffff });\r\n  const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n  plane.receiveShadow = true;\r\n  plane.rotation.x = -0.5 * Math.PI;\r\n  plane.position.x = 0;\r\n  plane.position.y = 0;\r\n  plane.position.z = 0;\r\n  scene.add(plane);\r\n\r\n  /* ambientLight */\r\n  const ambientLight = new THREE.AmbientLight(0x0c0c0c);\r\n  scene.add(ambientLight);\r\n\r\n  /* spotLight */\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(-20, 30, -5);\r\n  spotLight.castShadow = true;\r\n  scene.add(spotLight);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  const controls = {\r\n    rotationSpeed: 0.02,\r\n    numberOfObjects: scene.children.length,\r\n    removeCube() {\r\n      const allChildren = scene.children;\r\n      const lastObject = allChildren[allChildren.length - 1];\r\n      if (lastObject instanceof THREE.Mesh) {\r\n        scene.remove(lastObject);\r\n        this.numberOfObjects = scene.children.length;\r\n      }\r\n    },\r\n    addCube() {\r\n      const cubeSize = Math.ceil(Math.random() * 3);\r\n      const cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);\r\n      const cubeMaterial = new THREE.MeshLambertMaterial({\r\n        color: Math.random() * 0xffffff\r\n      });\r\n      const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\n      cube.castShadow = true;\r\n      cube.name = 'cube-' + scene.children.length;\r\n      cube.position.x =\r\n        -30 + Math.round(Math.random() * planeGeometry.parameters.width);\r\n      cube.position.y = Math.round(Math.random() * 5);\r\n      cube.position.z =\r\n        -20 + Math.round(Math.random() * planeGeometry.parameters.height);\r\n      scene.add(cube);\r\n      this.numberOfObjects = scene.children.length;\r\n    },\r\n    outputObjects() {\r\n      console.log(scene.children);\r\n    }\r\n  };\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'rotationSpeed', 0, 0.5);\r\n  gui.add(controls, 'addCube');\r\n  gui.add(controls, 'removeCube');\r\n  gui.add(controls, 'outputObjects');\r\n  gui.add(controls, 'numberOfObjects').listen();\r\n\r\n  /* render */\r\n  const render = () => {\r\n    stats.update();\r\n    scene.traverse(obj => {\r\n      if (obj instanceof THREE.Mesh && obj !== plane) {\r\n        obj.rotation.x += controls.rotationSpeed;\r\n        obj.rotation.y += controls.rotationSpeed;\r\n        obj.rotation.z += controls.rotationSpeed;\r\n      }\r\n    });\r\n    requestAnimationFrame(render);\r\n    renderer.render(scene, camera);\r\n  };\r\n  render();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}