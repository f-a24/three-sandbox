{"version":3,"file":"8.33253332b85ce7327b8e.bundle.js","sources":["webpack:///./src/chapter6/1.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nimport createMultiMaterialObject from '../utils/createMultiMaterialObject';\r\n\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/QuickHull';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/geometries/ConvexGeometry';\r\n\r\ndeclare module 'three' {\r\n  function ConvexGeometry(points: THREE.Vector3[]): void;\r\n}\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 50;\r\n  camera.lookAt(new THREE.Vector3(10, 0, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  let spGroup: THREE.Group;\r\n  let hullMesh: THREE.Group;\r\n  const generatePoints = () => {\r\n    const points = <THREE.Vector3[]>[];\r\n    for (let i = 0; i < 20; i++) {\r\n      const randomX = -15 + Math.round(Math.random() * 30);\r\n      const randomY = -15 + Math.round(Math.random() * 30);\r\n      const randomZ = -15 + Math.round(Math.random() * 30);\r\n      points.push(new THREE.Vector3(randomX, randomY, randomZ));\r\n    }\r\n    spGroup = new THREE.Group();\r\n    const material = new THREE.MeshBasicMaterial({\r\n      color: 0xff0000,\r\n      transparent: false\r\n    });\r\n    points.forEach(point => {\r\n      const spGeom = new THREE.SphereGeometry(0.2);\r\n      const spMesh = new THREE.Mesh(spGeom, material);\r\n      spMesh.position.copy(point);\r\n      spGroup.add(spMesh);\r\n    });\r\n    scene.add(spGroup);\r\n    const hullGeometry: THREE.Geometry = new THREE.ConvexGeometry(points);\r\n    hullMesh = createMesh(hullGeometry);\r\n    scene.add(hullMesh);\r\n  };\r\n\r\n  const createMesh = (geom: THREE.Geometry) => {\r\n    const meshMaterial = new THREE.MeshNormalMaterial();\r\n    meshMaterial.side = THREE.DoubleSide;\r\n    const wireFrameMat = new THREE.MeshBasicMaterial();\r\n    wireFrameMat.wireframe = true;\r\n    const mesh = createMultiMaterialObject(geom, [meshMaterial, wireFrameMat]);\r\n    return mesh;\r\n  };\r\n\r\n  /* generatePoints */\r\n  generatePoints();\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    redraw: () => {\r\n      scene.remove(spGroup);\r\n      scene.remove(hullMesh);\r\n      generatePoints();\r\n    }\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'redraw');\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    spGroup.rotation.y = step;\r\n    hullMesh.rotation.y = step += 0.01;\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}