(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{690:function(module,exports,__webpack_require__){var f;module.exports=((f=function(){function e(a){return c.appendChild(a.dom),a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",c.addEventListener("click",(function(a){a.preventDefault(),u(++l%c.children.length)}),!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));return u(0),{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();if(h.update(c-k,200),c>g+1e3&&(r.update(1e3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}}).Panel=function(e,f,l){var c=1/0,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r,q.height=h,q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");return b.font="bold "+9*a+"px Helvetica,Arial,sans-serif",b.textBaseline="top",b.fillStyle=l,b.fillRect(0,0,r,h),b.fillStyle=f,b.fillText(e,t,v),b.fillRect(d,m,n,p),b.fillStyle=l,b.globalAlpha=.9,b.fillRect(d,m,n,p),{dom:q,update:function(h,w){c=Math.min(c,h),k=Math.max(k,h),b.fillStyle=l,b.globalAlpha=1,b.fillRect(0,0,r,m),b.fillStyle=f,b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v),b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p),b.fillRect(d+n-a,m,a,p),b.fillStyle=l,b.globalAlpha=.9,b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}},f)},695:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Pass}));var camera,geometry,FullScreenQuad,_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(691);function Pass(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}Object.assign(Pass.prototype,{setSize:function(){},render:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}),Pass.FullScreenQuad=(camera=new _build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera(-1,1,1,-1,0,1),geometry=new _build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PlaneBufferGeometry(2,2),FullScreenQuad=function(material){this._mesh=new _build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry,material)},Object.defineProperty(FullScreenQuad.prototype,"material",{get:function(){return this._mesh.material},set:function(value){this._mesh.material=value}}),Object.assign(FullScreenQuad.prototype,{render:function(renderer){renderer.render(this._mesh,camera)}}),FullScreenQuad)},699:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return CopyShader}));var CopyShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")}},700:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return ShaderPass}));var _build_three_module_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(691),_postprocessing_Pass_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(695),ShaderPass=function(shader,textureID){_postprocessing_Pass_js__WEBPACK_IMPORTED_MODULE_1__.a.call(this),this.textureID=void 0!==textureID?textureID:"tDiffuse",shader instanceof _build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial?(this.uniforms=shader.uniforms,this.material=shader):shader&&(this.uniforms=_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.UniformsUtils.clone(shader.uniforms),this.material=new _build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial({defines:Object.assign({},shader.defines),uniforms:this.uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader})),this.fsQuad=new _postprocessing_Pass_js__WEBPACK_IMPORTED_MODULE_1__.a.FullScreenQuad(this.material)};ShaderPass.prototype=Object.assign(Object.create(_postprocessing_Pass_js__WEBPACK_IMPORTED_MODULE_1__.a.prototype),{constructor:ShaderPass,render:function(renderer,writeBuffer,readBuffer){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=readBuffer.texture),this.fsQuad.material=this.material,this.renderToScreen?(renderer.setRenderTarget(null),this.fsQuad.render(renderer)):(renderer.setRenderTarget(writeBuffer),this.clear&&renderer.clear(renderer.autoClearColor,renderer.autoClearDepth,renderer.autoClearStencil),this.fsQuad.render(renderer))}})},702:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return RenderPass}));var _postprocessing_Pass_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(695),RenderPass=function(scene,camera,overrideMaterial,clearColor,clearAlpha){_postprocessing_Pass_js__WEBPACK_IMPORTED_MODULE_0__.a.call(this),this.scene=scene,this.camera=camera,this.overrideMaterial=overrideMaterial,this.clearColor=clearColor,this.clearAlpha=void 0!==clearAlpha?clearAlpha:0,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1};RenderPass.prototype=Object.assign(Object.create(_postprocessing_Pass_js__WEBPACK_IMPORTED_MODULE_0__.a.prototype),{constructor:RenderPass,render:function(renderer,writeBuffer,readBuffer){var oldClearColor,oldClearAlpha,oldAutoClear=renderer.autoClear;renderer.autoClear=!1,this.scene.overrideMaterial=this.overrideMaterial,this.clearColor&&(oldClearColor=renderer.getClearColor().getHex(),oldClearAlpha=renderer.getClearAlpha(),renderer.setClearColor(this.clearColor,this.clearAlpha)),this.clearDepth&&renderer.clearDepth(),renderer.setRenderTarget(this.renderToScreen?null:readBuffer),this.clear&&renderer.clear(renderer.autoClearColor,renderer.autoClearDepth,renderer.autoClearStencil),renderer.render(this.scene,this.camera),this.clearColor&&renderer.setClearColor(oldClearColor,oldClearAlpha),this.scene.overrideMaterial=null,renderer.autoClear=oldAutoClear}})},708:function(module,__webpack_exports__,__webpack_require__){"use strict";var three_module=__webpack_require__(691),CopyShader=__webpack_require__(699),ShaderPass=__webpack_require__(700),Pass=__webpack_require__(695),MaskPass=function(scene,camera){Pass.a.call(this),this.scene=scene,this.camera=camera,this.clear=!0,this.needsSwap=!1,this.inverse=!1};MaskPass.prototype=Object.assign(Object.create(Pass.a.prototype),{constructor:MaskPass,render:function(renderer,writeBuffer,readBuffer){var writeValue,clearValue,context=renderer.getContext(),state=renderer.state;state.buffers.color.setMask(!1),state.buffers.depth.setMask(!1),state.buffers.color.setLocked(!0),state.buffers.depth.setLocked(!0),this.inverse?(writeValue=0,clearValue=1):(writeValue=1,clearValue=0),state.buffers.stencil.setTest(!0),state.buffers.stencil.setOp(context.REPLACE,context.REPLACE,context.REPLACE),state.buffers.stencil.setFunc(context.ALWAYS,writeValue,4294967295),state.buffers.stencil.setClear(clearValue),state.buffers.stencil.setLocked(!0),renderer.setRenderTarget(readBuffer),this.clear&&renderer.clear(),renderer.render(this.scene,this.camera),renderer.setRenderTarget(writeBuffer),this.clear&&renderer.clear(),renderer.render(this.scene,this.camera),state.buffers.color.setLocked(!1),state.buffers.depth.setLocked(!1),state.buffers.stencil.setLocked(!1),state.buffers.stencil.setFunc(context.EQUAL,1,4294967295),state.buffers.stencil.setOp(context.KEEP,context.KEEP,context.KEEP),state.buffers.stencil.setLocked(!0)}});var ClearMaskPass=function(){Pass.a.call(this),this.needsSwap=!1};ClearMaskPass.prototype=Object.create(Pass.a.prototype),Object.assign(ClearMaskPass.prototype,{render:function(renderer){renderer.state.buffers.stencil.setLocked(!1),renderer.state.buffers.stencil.setTest(!1)}}),__webpack_require__.d(__webpack_exports__,"a",(function(){return EffectComposer}));var EffectComposer=function(renderer,renderTarget){if(this.renderer=renderer,void 0===renderTarget){var parameters={minFilter:three_module.LinearFilter,magFilter:three_module.LinearFilter,format:three_module.RGBAFormat,stencilBuffer:!1},size=renderer.getSize(new three_module.Vector2);this._pixelRatio=renderer.getPixelRatio(),this._width=size.width,this._height=size.height,(renderTarget=new three_module.WebGLRenderTarget(this._width*this._pixelRatio,this._height*this._pixelRatio,parameters)).texture.name="EffectComposer.rt1"}else this._pixelRatio=1,this._width=renderTarget.width,this._height=renderTarget.height;this.renderTarget1=renderTarget,this.renderTarget2=renderTarget.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],void 0===CopyShader.a&&console.error("THREE.EffectComposer relies on CopyShader"),void 0===ShaderPass.a&&console.error("THREE.EffectComposer relies on ShaderPass"),this.copyPass=new ShaderPass.a(CopyShader.a),this.clock=new three_module.Clock};Object.assign(EffectComposer.prototype,{swapBuffers:function(){var tmp=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=tmp},addPass:function(pass){this.passes.push(pass),pass.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)},insertPass:function(pass,index){this.passes.splice(index,0,pass)},isLastEnabledPass:function(passIndex){for(var i=passIndex+1;i<this.passes.length;i++)if(this.passes[i].enabled)return!1;return!0},render:function(deltaTime){void 0===deltaTime&&(deltaTime=this.clock.getDelta());var pass,i,currentRenderTarget=this.renderer.getRenderTarget(),maskActive=!1,il=this.passes.length;for(i=0;i<il;i++)if(!1!==(pass=this.passes[i]).enabled){if(pass.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(i),pass.render(this.renderer,this.writeBuffer,this.readBuffer,deltaTime,maskActive),pass.needsSwap){if(maskActive){var context=this.renderer.getContext(),stencil=this.renderer.state.buffers.stencil;stencil.setFunc(context.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,deltaTime),stencil.setFunc(context.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==MaskPass&&(pass instanceof MaskPass?maskActive=!0:pass instanceof ClearMaskPass&&(maskActive=!1))}this.renderer.setRenderTarget(currentRenderTarget)},reset:function(renderTarget){if(void 0===renderTarget){var size=this.renderer.getSize(new three_module.Vector2);this._pixelRatio=this.renderer.getPixelRatio(),this._width=size.width,this._height=size.height,(renderTarget=this.renderTarget1.clone()).setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=renderTarget,this.renderTarget2=renderTarget.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(width,height){this._width=width,this._height=height;var effectiveWidth=this._width*this._pixelRatio,effectiveHeight=this._height*this._pixelRatio;this.renderTarget1.setSize(effectiveWidth,effectiveHeight),this.renderTarget2.setSize(effectiveWidth,effectiveHeight);for(var i=0;i<this.passes.length;i++)this.passes[i].setSize(effectiveWidth,effectiveHeight)},setPixelRatio:function(pixelRatio){this._pixelRatio=pixelRatio,this.setSize(this._width,this._height)}});var camera,geometry,FullScreenQuad,EffectComposer_Pass=function(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1};Object.assign(EffectComposer_Pass.prototype,{setSize:function(){},render:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}),EffectComposer_Pass.FullScreenQuad=(camera=new three_module.OrthographicCamera(-1,1,1,-1,0,1),geometry=new three_module.PlaneBufferGeometry(2,2),FullScreenQuad=function(material){this._mesh=new three_module.Mesh(geometry,material)},Object.defineProperty(FullScreenQuad.prototype,"material",{get:function(){return this._mesh.material},set:function(value){this._mesh.material=value}}),Object.assign(FullScreenQuad.prototype,{render:function(renderer){renderer.render(this._mesh,camera)}}),FullScreenQuad)},729:function(module,__webpack_exports__,__webpack_require__){"use strict";var three_module=__webpack_require__(691),EffectComposer=__webpack_require__(708),ShaderPass=__webpack_require__(700),RenderPass=__webpack_require__(702),FXAAShader={uniforms:{tDiffuse:{value:null},resolution:{value:new three_module.Vector2(1/1024,1/512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","","uniform sampler2D tDiffuse;","","uniform vec2 resolution;","","varying vec2 vUv;","","// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)","","//----------------------------------------------------------------------------------","// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag","// SDK Version: v3.00","// Email:       gameworks@nvidia.com","// Site:        http://developer.nvidia.com/","//","// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.","//","// Redistribution and use in source and binary forms, with or without","// modification, are permitted provided that the following conditions","// are met:","//  * Redistributions of source code must retain the above copyright","//    notice, this list of conditions and the following disclaimer.","//  * Redistributions in binary form must reproduce the above copyright","//    notice, this list of conditions and the following disclaimer in the","//    documentation and/or other materials provided with the distribution.","//  * Neither the name of NVIDIA CORPORATION nor the names of its","//    contributors may be used to endorse or promote products derived","//    from this software without specific prior written permission.","//","// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY","// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE","// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR","// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR","// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,","// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,","// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR","// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY","// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT","// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE","// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","//","//----------------------------------------------------------------------------------","","#define FXAA_PC 1","#define FXAA_GLSL_100 1","#define FXAA_QUALITY_PRESET 12","","#define FXAA_GREEN_AS_LUMA 1","","/*--------------------------------------------------------------------------*/","#ifndef FXAA_PC_CONSOLE","    //","    // The console algorithm for PC is included","    // for developers targeting really low spec machines.","    // Likely better to just run FXAA_PC, and use a really low preset.","    //","    #define FXAA_PC_CONSOLE 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_GLSL_120","    #define FXAA_GLSL_120 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_GLSL_130","    #define FXAA_GLSL_130 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_HLSL_3","    #define FXAA_HLSL_3 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_HLSL_4","    #define FXAA_HLSL_4 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_HLSL_5","    #define FXAA_HLSL_5 0","#endif","/*==========================================================================*/","#ifndef FXAA_GREEN_AS_LUMA","    //","    // For those using non-linear color,","    // and either not able to get luma in alpha, or not wanting to,","    // this enables FXAA to run using green as a proxy for luma.","    // So with this enabled, no need to pack luma in alpha.","    //","    // This will turn off AA on anything which lacks some amount of green.","    // Pure red and blue or combination of only R and B, will get no AA.","    //","    // Might want to lower the settings for both,","    //    fxaaConsoleEdgeThresholdMin","    //    fxaaQualityEdgeThresholdMin","    // In order to insure AA does not get turned off on colors","    // which contain a minor amount of green.","    //","    // 1 = On.","    // 0 = Off.","    //","    #define FXAA_GREEN_AS_LUMA 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_EARLY_EXIT","    //","    // Controls algorithm's early exit path.","    // On PS3 turning this ON adds 2 cycles to the shader.","    // On 360 turning this OFF adds 10ths of a millisecond to the shader.","    // Turning this off on console will result in a more blurry image.","    // So this defaults to on.","    //","    // 1 = On.","    // 0 = Off.","    //","    #define FXAA_EARLY_EXIT 1","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_DISCARD","    //","    // Only valid for PC OpenGL currently.","    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.","    //","    // 1 = Use discard on pixels which don't need AA.","    //     For APIs which enable concurrent TEX+ROP from same surface.","    // 0 = Return unchanged color on pixels which don't need AA.","    //","    #define FXAA_DISCARD 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_FAST_PIXEL_OFFSET","    //","    // Used for GLSL 120 only.","    //","    // 1 = GL API supports fast pixel offsets","    // 0 = do not use fast pixel offsets","    //","    #ifdef GL_EXT_gpu_shader4","        #define FXAA_FAST_PIXEL_OFFSET 1","    #endif","    #ifdef GL_NV_gpu_shader5","        #define FXAA_FAST_PIXEL_OFFSET 1","    #endif","    #ifdef GL_ARB_gpu_shader5","        #define FXAA_FAST_PIXEL_OFFSET 1","    #endif","    #ifndef FXAA_FAST_PIXEL_OFFSET","        #define FXAA_FAST_PIXEL_OFFSET 0","    #endif","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_GATHER4_ALPHA","    //","    // 1 = API supports gather4 on alpha channel.","    // 0 = API does not support gather4 on alpha channel.","    //","    #if (FXAA_HLSL_5 == 1)","        #define FXAA_GATHER4_ALPHA 1","    #endif","    #ifdef GL_ARB_gpu_shader5","        #define FXAA_GATHER4_ALPHA 1","    #endif","    #ifdef GL_NV_gpu_shader5","        #define FXAA_GATHER4_ALPHA 1","    #endif","    #ifndef FXAA_GATHER4_ALPHA","        #define FXAA_GATHER4_ALPHA 0","    #endif","#endif","","","/*============================================================================","                        FXAA QUALITY - TUNING KNOBS","------------------------------------------------------------------------------","NOTE the other tuning knobs are now in the shader function inputs!","============================================================================*/","#ifndef FXAA_QUALITY_PRESET","    //","    // Choose the quality preset.","    // This needs to be compiled into the shader as it effects code.","    // Best option to include multiple presets is to","    // in each shader define the preset, then include this file.","    //","    // OPTIONS","    // -----------------------------------------------------------------------","    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)","    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)","    // 39       - no dither, very expensive","    //","    // NOTES","    // -----------------------------------------------------------------------","    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)","    // 13 = about same speed as FXAA 3.9 and better than 12","    // 23 = closest to FXAA 3.9 visually and performance wise","    //  _ = the lowest digit is directly related to performance","    // _  = the highest digit is directly related to style","    //","    #define FXAA_QUALITY_PRESET 12","#endif","","","/*============================================================================","","                           FXAA QUALITY - PRESETS","","============================================================================*/","","/*============================================================================","                     FXAA QUALITY - MEDIUM DITHER PRESETS","============================================================================*/","#if (FXAA_QUALITY_PRESET == 10)","    #define FXAA_QUALITY_PS 3","    #define FXAA_QUALITY_P0 1.5","    #define FXAA_QUALITY_P1 3.0","    #define FXAA_QUALITY_P2 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 11)","    #define FXAA_QUALITY_PS 4","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 3.0","    #define FXAA_QUALITY_P3 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 12)","    #define FXAA_QUALITY_PS 5","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 4.0","    #define FXAA_QUALITY_P4 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 13)","    #define FXAA_QUALITY_PS 6","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 4.0","    #define FXAA_QUALITY_P5 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 14)","    #define FXAA_QUALITY_PS 7","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 4.0","    #define FXAA_QUALITY_P6 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 15)","    #define FXAA_QUALITY_PS 8","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 4.0","    #define FXAA_QUALITY_P7 12.0","#endif","","/*============================================================================","                     FXAA QUALITY - LOW DITHER PRESETS","============================================================================*/","#if (FXAA_QUALITY_PRESET == 20)","    #define FXAA_QUALITY_PS 3","    #define FXAA_QUALITY_P0 1.5","    #define FXAA_QUALITY_P1 2.0","    #define FXAA_QUALITY_P2 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 21)","    #define FXAA_QUALITY_PS 4","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 22)","    #define FXAA_QUALITY_PS 5","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 23)","    #define FXAA_QUALITY_PS 6","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 24)","    #define FXAA_QUALITY_PS 7","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 3.0","    #define FXAA_QUALITY_P6 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 25)","    #define FXAA_QUALITY_PS 8","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 4.0","    #define FXAA_QUALITY_P7 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 26)","    #define FXAA_QUALITY_PS 9","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 4.0","    #define FXAA_QUALITY_P8 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 27)","    #define FXAA_QUALITY_PS 10","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 4.0","    #define FXAA_QUALITY_P9 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 28)","    #define FXAA_QUALITY_PS 11","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 2.0","    #define FXAA_QUALITY_P9 4.0","    #define FXAA_QUALITY_P10 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 29)","    #define FXAA_QUALITY_PS 12","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 2.0","    #define FXAA_QUALITY_P9 2.0","    #define FXAA_QUALITY_P10 4.0","    #define FXAA_QUALITY_P11 8.0","#endif","","/*============================================================================","                     FXAA QUALITY - EXTREME QUALITY","============================================================================*/","#if (FXAA_QUALITY_PRESET == 39)","    #define FXAA_QUALITY_PS 12","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.0","    #define FXAA_QUALITY_P2 1.0","    #define FXAA_QUALITY_P3 1.0","    #define FXAA_QUALITY_P4 1.0","    #define FXAA_QUALITY_P5 1.5","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 2.0","    #define FXAA_QUALITY_P9 2.0","    #define FXAA_QUALITY_P10 4.0","    #define FXAA_QUALITY_P11 8.0","#endif","","","","/*============================================================================","","                                API PORTING","","============================================================================*/","#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)","    #define FxaaBool bool","    #define FxaaDiscard discard","    #define FxaaFloat float","    #define FxaaFloat2 vec2","    #define FxaaFloat3 vec3","    #define FxaaFloat4 vec4","    #define FxaaHalf float","    #define FxaaHalf2 vec2","    #define FxaaHalf3 vec3","    #define FxaaHalf4 vec4","    #define FxaaInt2 ivec2","    #define FxaaSat(x) clamp(x, 0.0, 1.0)","    #define FxaaTex sampler2D","#else","    #define FxaaBool bool","    #define FxaaDiscard clip(-1)","    #define FxaaFloat float","    #define FxaaFloat2 float2","    #define FxaaFloat3 float3","    #define FxaaFloat4 float4","    #define FxaaHalf half","    #define FxaaHalf2 half2","    #define FxaaHalf3 half3","    #define FxaaHalf4 half4","    #define FxaaSat(x) saturate(x)","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_GLSL_100 == 1)","  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)","  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_GLSL_120 == 1)","    // Requires,","    //  #version 120","    // And at least,","    //  #extension GL_EXT_gpu_shader4 : enable","    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)","    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)","    #if (FXAA_FAST_PIXEL_OFFSET == 1)","        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)","    #else","        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)","    #endif","    #if (FXAA_GATHER4_ALPHA == 1)","        // use #extension GL_ARB_gpu_shader5 : enable","        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)","        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)","        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)","        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)","    #endif","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_GLSL_130 == 1)",'    // Requires "#version 130" or better',"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)","    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)","    #if (FXAA_GATHER4_ALPHA == 1)","        // use #extension GL_ARB_gpu_shader5 : enable","        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)","        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)","        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)","        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)","    #endif","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_HLSL_3 == 1)","    #define FxaaInt2 float2","    #define FxaaTex sampler2D","    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))","    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_HLSL_4 == 1)","    #define FxaaInt2 int2","    struct FxaaTex { SamplerState smpl; Texture2D tex; };","    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)","    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_HLSL_5 == 1)","    #define FxaaInt2 int2","    struct FxaaTex { SamplerState smpl; Texture2D tex; };","    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)","    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)","    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)","    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)","    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)","    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)","#endif","","","/*============================================================================","                   GREEN AS LUMA OPTION SUPPORT FUNCTION","============================================================================*/","#if (FXAA_GREEN_AS_LUMA == 0)","    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }","#else","    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }","#endif","","","","","/*============================================================================","","                             FXAA3 QUALITY - PC","","============================================================================*/","#if (FXAA_PC == 1)","/*--------------------------------------------------------------------------*/","FxaaFloat4 FxaaPixelShader(","    //","    // Use noperspective interpolation here (turn off perspective interpolation).","    // {xy} = center of pixel","    FxaaFloat2 pos,","    //","    // Used only for FXAA Console, and not used on the 360 version.","    // Use noperspective interpolation here (turn off perspective interpolation).","    // {xy_} = upper left of pixel","    // {_zw} = lower right of pixel","    FxaaFloat4 fxaaConsolePosPos,","    //","    // Input color texture.","    // {rgb_} = color in linear or perceptual color space","    // if (FXAA_GREEN_AS_LUMA == 0)","    //     {__a} = luma in perceptual color space (not linear)","    FxaaTex tex,","    //","    // Only used on the optimized 360 version of FXAA Console.",'    // For everything but 360, just use the same input here as for "tex".',"    // For 360, same texture, just alias with a 2nd sampler.","    // This sampler needs to have an exponent bias of -1.","    FxaaTex fxaaConsole360TexExpBiasNegOne,","    //","    // Only used on the optimized 360 version of FXAA Console.",'    // For everything but 360, just use the same input here as for "tex".',"    // For 360, same texture, just alias with a 3nd sampler.","    // This sampler needs to have an exponent bias of -2.","    FxaaTex fxaaConsole360TexExpBiasNegTwo,","    //","    // Only used on FXAA Quality.","    // This must be from a constant/uniform.","    // {x_} = 1.0/screenWidthInPixels","    // {_y} = 1.0/screenHeightInPixels","    FxaaFloat2 fxaaQualityRcpFrame,","    //","    // Only used on FXAA Console.","    // This must be from a constant/uniform.","    // This effects sub-pixel AA quality and inversely sharpness.","    //   Where N ranges between,","    //     N = 0.50 (default)","    //     N = 0.33 (sharper)","    // {x__} = -N/screenWidthInPixels","    // {_y_} = -N/screenHeightInPixels","    // {_z_} =  N/screenWidthInPixels","    // {__w} =  N/screenHeightInPixels","    FxaaFloat4 fxaaConsoleRcpFrameOpt,","    //","    // Only used on FXAA Console.","    // Not used on 360, but used on PS3 and PC.","    // This must be from a constant/uniform.","    // {x__} = -2.0/screenWidthInPixels","    // {_y_} = -2.0/screenHeightInPixels","    // {_z_} =  2.0/screenWidthInPixels","    // {__w} =  2.0/screenHeightInPixels","    FxaaFloat4 fxaaConsoleRcpFrameOpt2,","    //","    // Only used on FXAA Console.","    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.","    // This must be from a constant/uniform.","    // {x__} =  8.0/screenWidthInPixels","    // {_y_} =  8.0/screenHeightInPixels","    // {_z_} = -4.0/screenWidthInPixels","    // {__w} = -4.0/screenHeightInPixels","    FxaaFloat4 fxaaConsole360RcpFrameOpt2,","    //","    // Only used on FXAA Quality.","    // This used to be the FXAA_QUALITY_SUBPIX define.","    // It is here now to allow easier tuning.","    // Choose the amount of sub-pixel aliasing removal.","    // This can effect sharpness.","    //   1.00 - upper limit (softer)","    //   0.75 - default amount of filtering","    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)","    //   0.25 - almost off","    //   0.00 - completely off","    FxaaFloat fxaaQualitySubpix,","    //","    // Only used on FXAA Quality.","    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.","    // It is here now to allow easier tuning.","    // The minimum amount of local contrast required to apply algorithm.","    //   0.333 - too little (faster)","    //   0.250 - low quality","    //   0.166 - default","    //   0.125 - high quality","    //   0.063 - overkill (slower)","    FxaaFloat fxaaQualityEdgeThreshold,","    //","    // Only used on FXAA Quality.","    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.","    // It is here now to allow easier tuning.","    // Trims the algorithm from processing darks.","    //   0.0833 - upper limit (default, the start of visible unfiltered edges)","    //   0.0625 - high quality (faster)","    //   0.0312 - visible limit (slower)","    // Special notes when using FXAA_GREEN_AS_LUMA,","    //   Likely want to set this to zero.","    //   As colors that are mostly not-green","    //   will appear very dark in the green channel!","    //   Tune by looking at mostly non-green content,","    //   then start at zero and increase until aliasing is a problem.","    FxaaFloat fxaaQualityEdgeThresholdMin,","    //","    // Only used on FXAA Console.","    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.","    // It is here now to allow easier tuning.","    // This does not effect PS3, as this needs to be compiled in.","    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.","    //   Due to the PS3 being ALU bound,","    //   there are only three safe values here: 2 and 4 and 8.","    //   These options use the shaders ability to a free *|/ by 2|4|8.","    // For all other platforms can be a non-power of two.","    //   8.0 is sharper (default!!!)","    //   4.0 is softer","    //   2.0 is really soft (good only for vector graphics inputs)","    FxaaFloat fxaaConsoleEdgeSharpness,","    //","    // Only used on FXAA Console.","    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.","    // It is here now to allow easier tuning.","    // This does not effect PS3, as this needs to be compiled in.","    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.","    //   Due to the PS3 being ALU bound,","    //   there are only two safe values here: 1/4 and 1/8.","    //   These options use the shaders ability to a free *|/ by 2|4|8.","    // The console setting has a different mapping than the quality setting.","    // Other platforms can use other values.","    //   0.125 leaves less aliasing, but is softer (default!!!)","    //   0.25 leaves more aliasing, and is sharper","    FxaaFloat fxaaConsoleEdgeThreshold,","    //","    // Only used on FXAA Console.","    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.","    // It is here now to allow easier tuning.","    // Trims the algorithm from processing darks.","    // The console setting has a different mapping than the quality setting.","    // This only applies when FXAA_EARLY_EXIT is 1.","    // This does not apply to PS3,","    // PS3 was simplified to avoid more shader instructions.","    //   0.06 - faster but more aliasing in darks","    //   0.05 - default","    //   0.04 - slower and less aliasing in darks","    // Special notes when using FXAA_GREEN_AS_LUMA,","    //   Likely want to set this to zero.","    //   As colors that are mostly not-green","    //   will appear very dark in the green channel!","    //   Tune by looking at mostly non-green content,","    //   then start at zero and increase until aliasing is a problem.","    FxaaFloat fxaaConsoleEdgeThresholdMin,","    //","    // Extra constants for 360 FXAA Console only.","    // Use zeros or anything else for other platforms.","    // These must be in physical constant registers and NOT immediates.","    // Immediates will result in compiler un-optimizing.","    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)","    FxaaFloat4 fxaaConsole360ConstDir",") {","/*--------------------------------------------------------------------------*/","    FxaaFloat2 posM;","    posM.x = pos.x;","    posM.y = pos.y;","    #if (FXAA_GATHER4_ALPHA == 1)","        #if (FXAA_DISCARD == 0)","            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);","            #if (FXAA_GREEN_AS_LUMA == 0)","                #define lumaM rgbyM.w","            #else","                #define lumaM rgbyM.y","            #endif","        #endif","        #if (FXAA_GREEN_AS_LUMA == 0)","            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);","            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));","        #else","            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);","            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));","        #endif","        #if (FXAA_DISCARD == 1)","            #define lumaM luma4A.w","        #endif","        #define lumaE luma4A.z","        #define lumaS luma4A.x","        #define lumaSE luma4A.y","        #define lumaNW luma4B.w","        #define lumaN luma4B.z","        #define lumaW luma4B.x","    #else","        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);","        #if (FXAA_GREEN_AS_LUMA == 0)","            #define lumaM rgbyM.w","        #else","            #define lumaM rgbyM.y","        #endif","        #if (FXAA_GLSL_100 == 1)","          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));","        #else","          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));","        #endif","    #endif","/*--------------------------------------------------------------------------*/","    FxaaFloat maxSM = max(lumaS, lumaM);","    FxaaFloat minSM = min(lumaS, lumaM);","    FxaaFloat maxESM = max(lumaE, maxSM);","    FxaaFloat minESM = min(lumaE, minSM);","    FxaaFloat maxWN = max(lumaN, lumaW);","    FxaaFloat minWN = min(lumaN, lumaW);","    FxaaFloat rangeMax = max(maxWN, maxESM);","    FxaaFloat rangeMin = min(minWN, minESM);","    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;","    FxaaFloat range = rangeMax - rangeMin;","    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);","    FxaaBool earlyExit = range < rangeMaxClamped;","/*--------------------------------------------------------------------------*/","    if(earlyExit)","        #if (FXAA_DISCARD == 1)","            FxaaDiscard;","        #else","            return rgbyM;","        #endif","/*--------------------------------------------------------------------------*/","    #if (FXAA_GATHER4_ALPHA == 0)","        #if (FXAA_GLSL_100 == 1)","          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));","        #else","          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));","        #endif","    #else","        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));","        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));","    #endif","/*--------------------------------------------------------------------------*/","    FxaaFloat lumaNS = lumaN + lumaS;","    FxaaFloat lumaWE = lumaW + lumaE;","    FxaaFloat subpixRcpRange = 1.0/range;","    FxaaFloat subpixNSWE = lumaNS + lumaWE;","    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;","    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;","/*--------------------------------------------------------------------------*/","    FxaaFloat lumaNESE = lumaNE + lumaSE;","    FxaaFloat lumaNWNE = lumaNW + lumaNE;","    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;","    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;","/*--------------------------------------------------------------------------*/","    FxaaFloat lumaNWSW = lumaNW + lumaSW;","    FxaaFloat lumaSWSE = lumaSW + lumaSE;","    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);","    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);","    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;","    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;","    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;","    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;","/*--------------------------------------------------------------------------*/","    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;","    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;","    FxaaBool horzSpan = edgeHorz >= edgeVert;","    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;","/*--------------------------------------------------------------------------*/","    if(!horzSpan) lumaN = lumaW;","    if(!horzSpan) lumaS = lumaE;","    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;","    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;","/*--------------------------------------------------------------------------*/","    FxaaFloat gradientN = lumaN - lumaM;","    FxaaFloat gradientS = lumaS - lumaM;","    FxaaFloat lumaNN = lumaN + lumaM;","    FxaaFloat lumaSS = lumaS + lumaM;","    FxaaBool pairN = abs(gradientN) >= abs(gradientS);","    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));","    if(pairN) lengthSign = -lengthSign;","    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);","/*--------------------------------------------------------------------------*/","    FxaaFloat2 posB;","    posB.x = posM.x;","    posB.y = posM.y;","    FxaaFloat2 offNP;","    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;","    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;","    if(!horzSpan) posB.x += lengthSign * 0.5;","    if( horzSpan) posB.y += lengthSign * 0.5;","/*--------------------------------------------------------------------------*/","    FxaaFloat2 posN;","    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;","    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;","    FxaaFloat2 posP;","    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;","    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;","    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;","    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));","    FxaaFloat subpixE = subpixC * subpixC;","    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));","/*--------------------------------------------------------------------------*/","    if(!pairN) lumaNN = lumaSS;","    FxaaFloat gradientScaled = gradient * 1.0/4.0;","    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;","    FxaaFloat subpixF = subpixD * subpixE;","    FxaaBool lumaMLTZero = lumaMM < 0.0;","/*--------------------------------------------------------------------------*/","    lumaEndN -= lumaNN * 0.5;","    lumaEndP -= lumaNN * 0.5;","    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;","    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;","    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;","    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;","    FxaaBool doneNP = (!doneN) || (!doneP);","    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;","    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;","/*--------------------------------------------------------------------------*/","    if(doneNP) {","        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","        doneN = abs(lumaEndN) >= gradientScaled;","        doneP = abs(lumaEndP) >= gradientScaled;","        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;","        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;","        doneNP = (!doneN) || (!doneP);","        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;","        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;","/*--------------------------------------------------------------------------*/","        #if (FXAA_QUALITY_PS > 3)","        if(doneNP) {","            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","            doneN = abs(lumaEndN) >= gradientScaled;","            doneP = abs(lumaEndP) >= gradientScaled;","            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;","            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;","            doneNP = (!doneN) || (!doneP);","            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;","            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;","/*--------------------------------------------------------------------------*/","            #if (FXAA_QUALITY_PS > 4)","            if(doneNP) {","                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                doneN = abs(lumaEndN) >= gradientScaled;","                doneP = abs(lumaEndP) >= gradientScaled;","                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;","                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;","                doneNP = (!doneN) || (!doneP);","                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;","                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;","/*--------------------------------------------------------------------------*/","                #if (FXAA_QUALITY_PS > 5)","                if(doneNP) {","                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                    doneN = abs(lumaEndN) >= gradientScaled;","                    doneP = abs(lumaEndP) >= gradientScaled;","                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;","                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;","                    doneNP = (!doneN) || (!doneP);","                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;","                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;","/*--------------------------------------------------------------------------*/","                    #if (FXAA_QUALITY_PS > 6)","                    if(doneNP) {","                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                        doneN = abs(lumaEndN) >= gradientScaled;","                        doneP = abs(lumaEndP) >= gradientScaled;","                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;","                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;","                        doneNP = (!doneN) || (!doneP);","                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;","                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;","/*--------------------------------------------------------------------------*/","                        #if (FXAA_QUALITY_PS > 7)","                        if(doneNP) {","                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                            doneN = abs(lumaEndN) >= gradientScaled;","                            doneP = abs(lumaEndP) >= gradientScaled;","                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;","                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;","                            doneNP = (!doneN) || (!doneP);","                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;","                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;","/*--------------------------------------------------------------------------*/","    #if (FXAA_QUALITY_PS > 8)","    if(doneNP) {","        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","        doneN = abs(lumaEndN) >= gradientScaled;","        doneP = abs(lumaEndP) >= gradientScaled;","        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;","        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;","        doneNP = (!doneN) || (!doneP);","        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;","        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;","/*--------------------------------------------------------------------------*/","        #if (FXAA_QUALITY_PS > 9)","        if(doneNP) {","            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","            doneN = abs(lumaEndN) >= gradientScaled;","            doneP = abs(lumaEndP) >= gradientScaled;","            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;","            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;","            doneNP = (!doneN) || (!doneP);","            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;","            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;","/*--------------------------------------------------------------------------*/","            #if (FXAA_QUALITY_PS > 10)","            if(doneNP) {","                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                doneN = abs(lumaEndN) >= gradientScaled;","                doneP = abs(lumaEndP) >= gradientScaled;","                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;","                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;","                doneNP = (!doneN) || (!doneP);","                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;","                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;","/*--------------------------------------------------------------------------*/","                #if (FXAA_QUALITY_PS > 11)","                if(doneNP) {","                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                    doneN = abs(lumaEndN) >= gradientScaled;","                    doneP = abs(lumaEndP) >= gradientScaled;","                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;","                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;","                    doneNP = (!doneN) || (!doneP);","                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;","                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;","/*--------------------------------------------------------------------------*/","                    #if (FXAA_QUALITY_PS > 12)","                    if(doneNP) {","                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                        doneN = abs(lumaEndN) >= gradientScaled;","                        doneP = abs(lumaEndP) >= gradientScaled;","                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;","                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;","                        doneNP = (!doneN) || (!doneP);","                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;","                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;","/*--------------------------------------------------------------------------*/","                    }","                    #endif","/*--------------------------------------------------------------------------*/","                }","                #endif","/*--------------------------------------------------------------------------*/","            }","            #endif","/*--------------------------------------------------------------------------*/","        }","        #endif","/*--------------------------------------------------------------------------*/","    }","    #endif","/*--------------------------------------------------------------------------*/","                        }","                        #endif","/*--------------------------------------------------------------------------*/","                    }","                    #endif","/*--------------------------------------------------------------------------*/","                }","                #endif","/*--------------------------------------------------------------------------*/","            }","            #endif","/*--------------------------------------------------------------------------*/","        }","        #endif","/*--------------------------------------------------------------------------*/","    }","/*--------------------------------------------------------------------------*/","    FxaaFloat dstN = posM.x - posN.x;","    FxaaFloat dstP = posP.x - posM.x;","    if(!horzSpan) dstN = posM.y - posN.y;","    if(!horzSpan) dstP = posP.y - posM.y;","/*--------------------------------------------------------------------------*/","    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;","    FxaaFloat spanLength = (dstP + dstN);","    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;","    FxaaFloat spanLengthRcp = 1.0/spanLength;","/*--------------------------------------------------------------------------*/","    FxaaBool directionN = dstN < dstP;","    FxaaFloat dst = min(dstN, dstP);","    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;","    FxaaFloat subpixG = subpixF * subpixF;","    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;","    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;","/*--------------------------------------------------------------------------*/","    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;","    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);","    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;","    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;","    #if (FXAA_DISCARD == 1)","        return FxaaTexTop(tex, posM);","    #else","        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);","    #endif","}","/*==========================================================================*/","#endif","","void main() {","  gl_FragColor = FxaaPixelShader(","    vUv,","    vec4(0.0),","    tDiffuse,","    tDiffuse,","    tDiffuse,","    resolution,","    vec4(0.0),","    vec4(0.0),","    vec4(0.0),","    0.75,","    0.166,","    0.0833,","    0.0,","    0.0,","    0.0,","    vec4(0.0)","  );","","  // TODO avoid querying texture twice for same texel","  gl_FragColor.a = texture2D(tDiffuse, vUv).a;","}"].join("\n")},CopyShader=__webpack_require__(699);__webpack_require__.d(__webpack_exports__,"a",(function(){return WebGLDeferredRenderer}));var WebGLDeferredRenderer=function(parameters){parameters=parameters||{};var _context,_state,_width,_height,_compColor,_passColor,_passForward,_passCopy,_compReconstruction,_passReconstruction,_compNormalDepth,_compLight,_compFinal,_passNormalDepth,_passLight,_passLightFullscreen,_passFinal,_passFXAA,_depthTexture,_currentCamera,_lightScene,_lightFullscreenScene,_this=this,_antialias=!1,_hasTransparentObject=!1,_lightPrePass=!1,_cacheKeepAlive=!1,_tmpMaterial=new three_module.ShaderMaterial({visible:!1}),_tmpVector3=new three_module.Vector3,_lightScenesCache={},_lightFullscreenScenesCache={},_normalDepthMaterialsCache={},_normalDepthShininessMaterialsCache={},_colorMaterialsCache={},_reconstructionMaterialsCache={},_deferredLightsCache={},_classicDeferredLightMaterialsCache={},_lightPrePassMaterialsCache={},_removeThresholdCount=60,_originalMaterialsTable={},_originalOnBeforeRendersTable={},_originalVisibleTable={};function initLightScene(scene){var lightSceneData=_lightScenesCache[scene.uuid],lightFullscreenSceneData=_lightFullscreenScenesCache[scene.uuid];void 0===lightSceneData&&((s=new three_module.Scene).userData.lights={},(lightSceneData=createCacheData()).scene=s,_lightScenesCache[scene.uuid]=lightSceneData);if(void 0===lightFullscreenSceneData){var s;(s=new three_module.Scene).userData.lights={};var emissiveLight=function createDeferredEmissiveLight(){var shader=ShaderDeferred.emissiveLight,material=new three_module.ShaderMaterial({uniforms:Object.assign({},shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,blending:three_module.NoBlending,depthWrite:!1}),geometry=new three_module.PlaneBufferGeometry(2,2),mesh=new three_module.Mesh(geometry,material);return mesh.onBeforeRender=function(renderer,scene,camera,geometry,material){material.uniforms.samplerColor.value=_compColor.renderTarget2.texture},mesh}();s.userData.emissiveLight=emissiveLight,s.add(emissiveLight),(lightFullscreenSceneData=createCacheData()).scene=s,_lightFullscreenScenesCache[scene.uuid]=lightFullscreenSceneData}lightSceneData.used=!0,lightFullscreenSceneData.used=!0;var lightScene=lightSceneData.scene,lightFullscreenScene=lightFullscreenSceneData.scene;lightFullscreenScene.userData.emissiveLight.visible=!_lightPrePass,_lightScene=lightScene,_lightFullscreenScene=lightFullscreenScene}function getMaterialFromCacheOrCreate(originalMaterial,cache,createFunc,updateFunc){var data=cache[originalMaterial.uuid];return void 0===data&&((data=createCacheData()).material=createFunc(originalMaterial),cache[originalMaterial.uuid]=data),data.used=!0,updateFunc(data.material,originalMaterial),_originalMaterialsTable[data.material.uuid]=originalMaterial,data.material}function overrideMaterialAndOnBeforeRender(object,getMaterialFunc,onBeforeRender){if(void 0!==object.material){if(Array.isArray(object.material))for(var i=0,il=object.material.length;i<il;i++)object.material[i]=getMaterialFunc(object.material[i]);else object.material=getMaterialFunc(object.material);object.onBeforeRender=onBeforeRender}}function restoreOriginalMaterial(object){if(void 0!==object.material)if(Array.isArray(object.material))for(var i=0,il=object.material.length;i<il;i++)object.material[i]=_originalMaterialsTable[object.material[i].uuid];else object.material=_originalMaterialsTable[object.material.uuid]}function setMaterialNormalDepth(object){overrideMaterialAndOnBeforeRender(object,getNormalDepthMaterial,updateDeferredNormalDepthUniforms)}function getNormalDepthMaterial(originalMaterial){return getMaterialFromCacheOrCreate(originalMaterial,_lightPrePass?_normalDepthShininessMaterialsCache:_normalDepthMaterialsCache,createDeferredNormalDepthMaterial,updateDeferredNormalDepthMaterial)}function createDeferredNormalDepthMaterial(){var shader=_lightPrePass?ShaderDeferred.normalDepthShininess:ShaderDeferred.normalDepth;return new three_module.ShaderMaterial({uniforms:Object.assign({},shader.uniforms),fragmentShader:shader.fragmentShader,vertexShader:shader.vertexShader,blending:three_module.NoBlending})}function updateDeferredNormalDepthMaterial(material,originalMaterial){void 0!==originalMaterial.skinning&&(material.skinning=originalMaterial.skinning),void 0!==originalMaterial.morphTargets&&(material.morphTargets=originalMaterial.morphTargets),!0===originalMaterial.visible?material.visible=!originalMaterial.transparent:material.visible=!1}function updateDeferredNormalDepthUniforms(renderer,scene,camera,geometry,material){if(_lightPrePass){var originalMaterial=_originalMaterialsTable[material.uuid];void 0!==originalMaterial&&void 0!==originalMaterial.shininess&&(material.uniforms.shininess.value=originalMaterial.shininess)}}function setMaterialColor(object){overrideMaterialAndOnBeforeRender(object,getColorMaterial,updateDeferredColorUniforms)}function getColorMaterial(originalMaterial){return getMaterialFromCacheOrCreate(originalMaterial,_colorMaterialsCache,createDeferredColorMaterial,updateDeferredColorMaterial)}function createDeferredColorMaterial(originalMaterial){var shader=ShaderDeferred.color,material=new three_module.ShaderMaterial({uniforms:Object.assign({},shader.uniforms),fragmentShader:shader.fragmentShader,vertexShader:shader.vertexShader,blending:three_module.NoBlending});return void 0!==originalMaterial.map&&(material.map=originalMaterial.map),material}function updateDeferredColorMaterial(material,originalMaterial){void 0!==originalMaterial.map&&(material.map=originalMaterial.map),void 0!==originalMaterial.skinning&&(material.skinning=originalMaterial.skinning),void 0!==originalMaterial.morphTargets&&(material.morphTargets=originalMaterial.morphTargets),!0===originalMaterial.visible?material.visible=!originalMaterial.transparent:material.visible=!1}function updateDeferredColorUniforms(renderer,scene,camera,geometry,material){var diffuse,emissive,originalMaterial=_originalMaterialsTable[material.uuid],uniforms=material.uniforms;!0===originalMaterial.isMeshBasicMaterial?emissive=originalMaterial.color:(diffuse=originalMaterial.color,emissive=originalMaterial.emissive);var specular=originalMaterial.specular,shininess=originalMaterial.shininess,map=originalMaterial.map;void 0!==diffuse&&uniforms.diffuse.value.copy(diffuse),void 0!==emissive&&uniforms.emissive.value.copy(emissive),void 0!==specular&&uniforms.specular.value.copy(specular),void 0!==shininess&&void 0!==uniforms.shininess&&(uniforms.shininess.value=shininess),void 0!==map&&(uniforms.map.value=map)}function setMaterialReconstruction(object){overrideMaterialAndOnBeforeRender(object,getReconstructionMaterial,updateDeferredReconstructionUniforms)}function getReconstructionMaterial(originalMaterial){return!0===originalMaterial.transparent?(_originalMaterialsTable[originalMaterial.uuid]=originalMaterial,originalMaterial):getMaterialFromCacheOrCreate(originalMaterial,_reconstructionMaterialsCache,createDeferredReconstructionMaterial,updateDeferredReconstructionMaterial)}function createDeferredReconstructionMaterial(originalMaterial){var shader=ShaderDeferred.reconstruction,material=new three_module.ShaderMaterial({uniforms:Object.assign({},shader.uniforms),fragmentShader:shader.fragmentShader,vertexShader:shader.vertexShader,blending:three_module.NoBlending});return void 0!==originalMaterial.map&&(material.map=originalMaterial.map),material}function updateDeferredReconstructionMaterial(material,originalMaterial){updateDeferredColorMaterial(material,originalMaterial)}function updateDeferredReconstructionUniforms(renderer,scene,camera,geometry,material,group){if(!0!==material.transparent)updateDeferredColorUniforms(0,0,0,0,material),material.uniforms.samplerLight.value=_compLight.renderTarget2.texture;else{var onBeforeRender=_originalOnBeforeRendersTable[this.uuid];onBeforeRender&&onBeforeRender.call(this,renderer,scene,camera,geometry,material,group)}}function setVisibleForForwardRendering(object){if(void 0!==object.material)if(Array.isArray(object.material))for(var i=0,il=object.material.length;i<il;i++)void 0===_originalVisibleTable[object.material[i].uuid]&&(_originalVisibleTable[object.material[i].uuid]=object.material[i].visible,object.material[i].visible=object.material[i].transparent&&object.material[i].visible);else void 0===_originalVisibleTable[object.material.uuid]&&(_originalVisibleTable[object.material.uuid]=object.material.visible,object.material.visible=object.material.transparent&&object.material.visible)}function restoreVisible(object){if(void 0!==object.material)if(Array.isArray(object.material))for(var i=0,il=object.material.length;i<il;i++)object.material[i].visible=_originalVisibleTable[object.material[i].uuid];else object.material.visible=_originalVisibleTable[object.material.uuid]}function createDeferredLight(originalLight){return originalLight.isPointLight?function createDeferredPointLight(light){var mesh=createDeferredLightMesh(light,new three_module.SphereBufferGeometry(1,16,8));return mesh.onBeforeRender=updateDeferredPointLightUniforms,mesh}(originalLight):originalLight.isSpotLight?function createDeferredSpotLight(light){var mesh=createDeferredLightMesh(light,new three_module.PlaneBufferGeometry(2,2));return mesh.onBeforeRender=updateDeferredSpotLightUniforms,mesh}(originalLight):originalLight.isDirectionalLight?function createDeferredDirectionalLight(light){var mesh=createDeferredLightMesh(light,new three_module.PlaneBufferGeometry(2,2));return mesh.onBeforeRender=updateDeferredDirectionalLightUniforms,mesh}(originalLight):null}function createDeferredLightMaterial(originalLight){return originalLight.isPointLight?function createDeferredPointLightMaterial(){var material=createDeferredLightShaderMaterial(_lightPrePass?ShaderDeferred.pointLightPre:ShaderDeferred.pointLight);return material.side=three_module.BackSide,material.depthFunc=three_module.GreaterEqualDepth,material}():originalLight.isSpotLight?function createDeferredSpotLightMaterial(){var material=createDeferredLightShaderMaterial(_lightPrePass?ShaderDeferred.spotLightPre:ShaderDeferred.spotLight);return material.depthTest=!1,material}():originalLight.isDirectionalLight?function createDeferredDirectionalLightMaterial(){var material=createDeferredLightShaderMaterial(_lightPrePass?ShaderDeferred.directionalLightPre:ShaderDeferred.directionalLight);return material.depthTest=!1,material}():null}function getDeferredLightMaterial(light){var cache=_lightPrePass?_lightPrePassMaterialsCache:_classicDeferredLightMaterialsCache,data=cache[light.uuid];return void 0===data&&((data=createCacheData()).material=createDeferredLightMaterial(light.userData.originalLight),cache[light.uuid]=data),data.used=!0,data.material}function updateDeferredLight(light){light.userData.originalLight.isPointLight&&function updateDeferredPointLight(light){var originalLight=light.userData.originalLight,distance=originalLight.distance;distance>0&&(light.scale.set(1,1,1).multiplyScalar(distance),light.position.setFromMatrixPosition(originalLight.matrixWorld))}(light)}function createDeferredLightMesh(light,geometry){var mesh=new three_module.Mesh(geometry,_tmpMaterial);return mesh.userData.originalLight=light,mesh}function createDeferredLightShaderMaterial(shader){var material=new three_module.ShaderMaterial({uniforms:Object.assign({},shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,transparent:!0,blending:three_module.AdditiveBlending,depthWrite:!1});return _lightPrePass&&(material.premultipliedAlpha=!0),material}function updateDeferredLightCommonUniforms(uniforms){_lightPrePass?uniforms.samplerNormalDepthShininess.value=_compNormalDepth.renderTarget2.texture:(uniforms.samplerNormalDepth.value=_compNormalDepth.renderTarget2.texture,uniforms.samplerColor.value=_compColor.renderTarget2.texture)}function updateDeferredPointLightUniforms(renderer,scene,camera,geometry,material){var originalLight=this.userData.originalLight,distance=originalLight.distance,uniforms=material.uniforms;uniforms.lightColor.value.copy(originalLight.color),distance>0?(uniforms.lightRadius.value=distance,uniforms.lightIntensity.value=originalLight.intensity,uniforms.lightPositionVS.value.setFromMatrixPosition(originalLight.matrixWorld).applyMatrix4(_currentCamera.matrixWorldInverse)):uniforms.lightRadius.value=1/0,updateDeferredLightCommonUniforms(uniforms)}function updateDeferredSpotLightUniforms(){var originalLight=this.userData.originalLight,uniforms=this.material.uniforms;uniforms.lightAngle.value=originalLight.angle,uniforms.lightColor.value.copy(originalLight.color),uniforms.lightIntensity.value=originalLight.intensity,uniforms.lightPositionVS.value.setFromMatrixPosition(originalLight.matrixWorld).applyMatrix4(_currentCamera.matrixWorldInverse);var vec=uniforms.lightDirectionVS.value,vec2=_tmpVector3;vec.setFromMatrixPosition(originalLight.matrixWorld),vec2.setFromMatrixPosition(originalLight.target.matrixWorld),vec.sub(vec2).normalize().transformDirection(_currentCamera.matrixWorldInverse),updateDeferredLightCommonUniforms(uniforms)}function updateDeferredDirectionalLightUniforms(){var originalLight=this.userData.originalLight,uniforms=this.material.uniforms;uniforms.lightColor.value.copy(originalLight.color),uniforms.lightIntensity.value=originalLight.intensity;var vec=uniforms.lightDirectionVS.value,vec2=_tmpVector3;vec.setFromMatrixPosition(originalLight.matrixWorld),vec2.setFromMatrixPosition(originalLight.target.matrixWorld),vec.sub(vec2).normalize().transformDirection(_currentCamera.matrixWorldInverse),updateDeferredLightCommonUniforms(uniforms)}function saveOriginalOnBeforeRenderAndCheckTransparency(object){if(void 0!==object.material&&(_originalOnBeforeRendersTable[object.uuid]=object.onBeforeRender,!_hasTransparentObject&&!_lightPrePass&&object.visible))if(Array.isArray(object.material)){for(var i=0,il=object.material.length;i<il;i++)if(!0===object.material[i].visible&&!0===object.material[i].transparent){_hasTransparentObject=!0;break}}else!0===object.material.visible&&!0===object.material.transparent&&(_hasTransparentObject=!0)}function restoreOriginalOnBeforeRender(object){void 0!==object.material&&(object.onBeforeRender=_originalOnBeforeRendersTable[object.uuid])}function addDeferredLightsToLightScene(object){if(!0===object.isLight){var data=_deferredLightsCache[object.uuid];void 0===data&&((data=createCacheData()).light=createDeferredLight(object),_deferredLightsCache[object.uuid]=data),data.used=!0;var light=data.light;if(null!==light){var scene=!0===object.isPointLight?_lightScene:_lightFullscreenScene,lights=scene.userData.lights;void 0===lights[light.uuid]&&(scene.add(light),lights[light.uuid]={light:light,found:!0}),lights[light.uuid].found=!0}}}function updateDeferredLightsInLightScene(scene){for(var lights=scene.userData.lights,keys=Object.keys(lights),i=0,il=keys.length;i<il;i++){var key=keys[i];if(!1===lights[key].found)scene.remove(lights[key].light),delete lights[key];else{var light=lights[key].light;light.material=getDeferredLightMaterial(light),updateDeferredLight(light),lights[key].found=!1}}}function createCacheData(){return{used:!0,keepAlive:_cacheKeepAlive,count:0}}function cleanupCache(cache){for(var keys=Object.keys(cache),i=0,il=keys.length;i<il;i++){var key=keys[i];!1===cache[key].used?(cache[key].count++,!1===cache[key].keepAlive&&cache[key].count>_removeThresholdCount&&delete cache[key]):(cache[key].used=!1,cache[key].count=0)}}function cleanupTable(table){for(var keys=Object.keys(table),i=0,il=keys.length;i<il;i++){table[keys[i]]=void 0}}function renderFinal(scene,camera){!_lightPrePass&&_hasTransparentObject&&(scene.traverse(setVisibleForForwardRendering),scene.traverse(restoreOriginalOnBeforeRender),_passForward.scene=scene,_passForward.camera=camera),function enableFinalPasses(){_lightPrePass?(_passForward.enabled=!1,_passCopy.enabled=!1,_passFXAA.enabled=!!_antialias):_hasTransparentObject?_antialias?(_passForward.enabled=!0,_passCopy.enabled=!1,_passFXAA.enabled=!0):(_passForward.enabled=!0,_passCopy.enabled=!0,_passFXAA.enabled=!1):_antialias?(_passForward.enabled=!1,_passCopy.enabled=!1,_passFXAA.enabled=!0):(_passForward.enabled=!1,_passCopy.enabled=!1,_passFXAA.enabled=!1)}(),_this.renderer.autoClearDepth=!1,_this.renderer.autoClearStencil=!1,_compFinal.render(),!_lightPrePass&&_hasTransparentObject&&scene.traverse(restoreVisible)}this.renderer=void 0,this.domElement=void 0,this.forwardRendering=!1,this.setSize=function(width,height){_width=width,_height=height,this.renderer.setSize(_width,_height),_compNormalDepth.setSize(_width,_height),_compColor.setSize(_width,_height),_compLight.setSize(_width,_height),_compReconstruction.setSize(_width,_height),_compFinal.setSize(_width,_height),_depthTexture.image.width=_width,_depthTexture.image.height=_height,_depthTexture.needsUpdate=!0,_passFXAA.uniforms.resolution.value.set(1/_width,1/_height)},this.setAntialias=function(enabled){_antialias=enabled},this.enableLightPrePass=function(enabled){_lightPrePass=enabled,_passFinal.uniforms.samplerResult.value=_lightPrePass?_compReconstruction.renderTarget2.texture:_compLight.renderTarget2.texture},this.render=function(scene,camera){if(this.forwardRendering)this.renderer.render(scene,camera);else{var currentSceneAutoUpdate=scene.autoUpdate,currentAutoClearColor=this.renderer.autoClearColor,currentAutoClearDepth=this.renderer.autoClearDepth,currentAutoClearStencil=this.renderer.autoClearStencil;_currentCamera=camera,initLightScene(scene),scene.autoUpdate=!1,scene.updateMatrixWorld(),_hasTransparentObject=!1,scene.traverse(saveOriginalOnBeforeRenderAndCheckTransparency),function updateDeferredCommonUniforms(camera){var uniforms=ShaderDeferredCommon.commonUniforms;uniforms.viewWidth.value=_width,uniforms.viewHeight.value=_height,uniforms.matProjInverse.value.getInverse(camera.projectionMatrix)}(camera),function renderNormalDepth(scene,camera){scene.traverse(setMaterialNormalDepth),_passNormalDepth.scene=scene,_passNormalDepth.camera=camera,_this.renderer.autoClearDepth=!0,_this.renderer.autoClearStencil=!0,_state.buffers.stencil.setTest(!0),_state.buffers.stencil.setFunc(_context.ALWAYS,1,4294967295),_state.buffers.stencil.setOp(_context.REPLACE,_context.REPLACE,_context.REPLACE),_compNormalDepth.render(),scene.traverse(restoreOriginalMaterial)}(scene,camera),_lightPrePass?(!function renderLightPre(scene,camera){scene.traverse(addDeferredLightsToLightScene),updateDeferredLightsInLightScene(_lightScene),updateDeferredLightsInLightScene(_lightFullscreenScene),_passLight.scene=_lightScene,_passLight.camera=camera,_passLightFullscreen.scene=_lightFullscreenScene,_this.renderer.autoClearDepth=!1,_this.renderer.autoClearStencil=!1,_state.buffers.stencil.setFunc(_context.EQUAL,1,4294967295),_state.buffers.stencil.setOp(_context.KEEP,_context.KEEP,_context.KEEP),_compLight.render()}(scene,camera),function renderReconstruction(scene,camera){scene.traverse(setMaterialReconstruction),_passReconstruction.scene=scene,_passReconstruction.camera=camera,_this.renderer.autoClearDepth=!1,_this.renderer.autoClearStencil=!1,_compReconstruction.render(),_state.buffers.stencil.setTest(!1),scene.traverse(restoreOriginalMaterial)}(scene,camera)):(!function renderColor(scene,camera){scene.traverse(setMaterialColor),_passColor.scene=scene,_passColor.camera=camera,_this.renderer.autoClearDepth=!1,_this.renderer.autoClearStencil=!1,_state.buffers.stencil.setFunc(_context.EQUAL,1,4294967295),_state.buffers.stencil.setOp(_context.KEEP,_context.KEEP,_context.KEEP),_compColor.render(),scene.traverse(restoreOriginalMaterial)}(scene,camera),function renderLight(scene,camera){scene.traverse(addDeferredLightsToLightScene),updateDeferredLightsInLightScene(_lightScene),updateDeferredLightsInLightScene(_lightFullscreenScene),_passLight.scene=_lightScene,_passLight.camera=camera,_passLightFullscreen.scene=_lightFullscreenScene,_this.renderer.autoClearDepth=!1,_this.renderer.autoClearStencil=!1,_compLight.render(),_state.buffers.stencil.setTest(!1)}(scene,camera)),renderFinal(scene,camera),scene.traverse(restoreOriginalOnBeforeRender),function cleanupCaches(){cleanupCache(_lightScenesCache),cleanupCache(_lightFullscreenScenesCache),cleanupCache(_normalDepthMaterialsCache),cleanupCache(_normalDepthShininessMaterialsCache),cleanupCache(_colorMaterialsCache),cleanupCache(_reconstructionMaterialsCache),cleanupCache(_classicDeferredLightMaterialsCache),cleanupCache(_lightPrePassMaterialsCache),cleanupCache(_deferredLightsCache),cleanupTable(_originalMaterialsTable),cleanupTable(_originalOnBeforeRendersTable),cleanupTable(_originalVisibleTable)}(),scene.autoUpdate=currentSceneAutoUpdate,this.renderer.autoClearColor=currentAutoClearColor,this.renderer.autoClearDepth=currentAutoClearDepth,this.renderer.autoClearStencil=currentAutoClearStencil}},function init(parameters){_this.renderer=void 0!==parameters.renderer?parameters.renderer:new three_module.WebGLRenderer,_this.domElement=_this.renderer.domElement,_context=_this.renderer.getContext(),_state=_this.renderer.state,_width=void 0!==parameters.width?parameters.width:_this.renderer.getSize(new three_module.Vector2).width,_height=void 0!==parameters.height?parameters.height:_this.renderer.getSize(new three_module.Vector2).height;var antialias=void 0!==parameters.antialias&&parameters.antialias;void 0!==parameters.cacheKeepAlive&&(_cacheKeepAlive=parameters.cacheKeepAlive),function initDepthTexture(){_depthTexture=new three_module.DepthTexture(_width,_height,three_module.UnsignedInt248Type,void 0,void 0,void 0,void 0,void 0,void 0,three_module.DepthStencilFormat)}(),function initPassNormalDepth(){(_passNormalDepth=new RenderPass.a).clear=!0;var rt=new three_module.WebGLRenderTarget(_width,_height,{minFilter:three_module.NearestFilter,magFilter:three_module.NearestFilter,format:three_module.RGBAFormat,type:three_module.FloatType,stencilBuffer:!0,depthTexture:_depthTexture});rt.texture.generateMipamps=!1,(_compNormalDepth=new EffectComposer.a(_this.renderer,rt)).renderToScreen=!1,_compNormalDepth.addPass(_passNormalDepth)}(),function initPassColor(){(_passColor=new RenderPass.a).clear=!0;var rt=new three_module.WebGLRenderTarget(_width,_height,{minFilter:three_module.NearestFilter,magFilter:three_module.NearestFilter,format:three_module.RGBAFormat,type:three_module.FloatType,depthTexture:_depthTexture});rt.texture.generateMipamps=!1,(_compColor=new EffectComposer.a(_this.renderer,rt)).renderToScreen=!1,_compColor.addPass(_passColor)}(),function initPassLight(){(_passLightFullscreen=new RenderPass.a).clear=!0,_passLightFullscreen.camera=new three_module.OrthographicCamera(-1,1,1,-1,0,1),(_passLight=new RenderPass.a).clear=!1;var rt=new three_module.WebGLRenderTarget(_width,_height,{minFilter:three_module.NearestFilter,magFilter:three_module.NearestFilter,format:three_module.RGBAFormat,type:three_module.FloatType,depthTexture:_depthTexture});rt.texture.generateMipamps=!1,(_compLight=new EffectComposer.a(_this.renderer,rt)).renderToScreen=!1,_compLight.addPass(_passLightFullscreen),_compLight.addPass(_passLight)}(),function initPassReconstruction(){(_passReconstruction=new RenderPass.a).clear=!0;var rt=new three_module.WebGLRenderTarget(_width,_height,{minFilter:three_module.NearestFilter,magFilter:three_module.NearestFilter,format:three_module.RGBAFormat,type:three_module.FloatType,depthTexture:_depthTexture});rt.texture.generateMipamps=!1,(_compReconstruction=new EffectComposer.a(_this.renderer,rt)).renderToScreen=!1,_compReconstruction.addPass(_passReconstruction)}(),function initPassFinal(){(_passFinal=new ShaderPass.a(ShaderDeferred.final)).clear=!0,_passFinal.uniforms.samplerResult.value=_compLight.renderTarget2.texture,_passFinal.material.blending=three_module.NoBlending,_passFinal.material.depthWrite=!1,_passFinal.material.depthTest=!1,(_passForward=new RenderPass.a).clear=!1,_passCopy=new ShaderPass.a(CopyShader.a),_passFXAA=new ShaderPass.a(FXAAShader);var rt=new three_module.WebGLRenderTarget(_width,_height,{minFilter:three_module.NearestFilter,magFilter:three_module.LinearFilter,format:three_module.RGBFormat,type:three_module.UnsignedByteType,depthTexture:_depthTexture});rt.texture.generateMipamps=!1,(_compFinal=new EffectComposer.a(_this.renderer,rt)).addPass(_passFinal),_compFinal.addPass(_passForward),_compFinal.addPass(_passCopy),_compFinal.addPass(_passFXAA)}(),_this.setSize(_width,_height),_this.setAntialias(antialias),_this.enableLightPrePass(!1)}(parameters)},DeferredShaderChunk={packVector3:["float vec3_to_float( vec3 data ) {","\tconst float unit = 255.0/256.0;","\thighp float compressed = fract( data.x * unit ) + floor( data.y * unit * 255.0 ) + floor( data.z * unit * 255.0 ) * 255.0;","\treturn compressed;","}"].join("\n"),unpackFloat:["vec3 float_to_vec3( float data ) {","\tconst float unit = 255.0;","\tvec3 uncompressed;","\tuncompressed.x = fract( data );","\tfloat zInt = floor( data / unit );","\tuncompressed.z = fract( zInt / unit );","\tuncompressed.y = fract( floor( data - ( zInt * unit ) ) / unit );","\treturn uncompressed;","}"].join("\n"),packNormal:["vec2 normal_to_vec2( vec3 normal ) {","\treturn normal.xy / sqrt( normal.z * 8.0 + 8.0 ) + 0.5;","}"].join("\n"),unpackVector2:["vec3 vec2_to_normal( vec2 data ) {","\tvec2 fenc = data * 4.0 - 2.0;","\tfloat f = dot( fenc, fenc );","\tfloat g = sqrt( 1.0 - f / 4.0 );","\tvec3 normal;","\tnormal.xy = fenc * g;","\tnormal.z = 1.0 - f / 2.0;","\treturn normal;","}"].join("\n"),computeTextureCoord:["vec2 texCoord = gl_FragCoord.xy / vec2( viewWidth, viewHeight );"].join("\n"),packNormalDepth:["vec4 packedNormalDepth;","packedNormalDepth.xyz = normal * 0.5 + 0.5;","packedNormalDepth.w = position.z / position.w;"].join("\n"),unpackNormalDepth:["vec4 normalDepthMap = texture2D( samplerNormalDepth, texCoord );","float depth = normalDepthMap.w;","if ( depth == 0.0 ) discard;","vec3 normal = normalDepthMap.xyz * 2.0 - 1.0;"].join("\n"),packNormalDepthShininess:["vec4 packedNormalDepthShininess;","packedNormalDepthShininess.xy = normal_to_vec2( normal );","packedNormalDepthShininess.z = shininess;","packedNormalDepthShininess.w = position.z / position.w;"].join("\n"),unpackNormalDepthShininess:["vec4 normalDepthMap = texture2D( samplerNormalDepthShininess, texCoord );","float depth = normalDepthMap.w;","if ( depth == 0.0 ) discard;","vec3 normal = vec2_to_normal( normalDepthMap.xy );","float shininess = normalDepthMap.z;"].join("\n"),packColor:["vec4 packedColor;","packedColor.x = vec3_to_float( diffuseColor.rgb );","packedColor.y = vec3_to_float( emissiveColor );","packedColor.z = vec3_to_float( specularColor );","packedColor.w = shininess;"].join("\n"),unpackColor:["vec4 colorMap = texture2D( samplerColor, texCoord );","vec3 diffuseColor = float_to_vec3( colorMap.x );","vec3 emissiveColor = float_to_vec3( colorMap.y );","vec3 specularColor = float_to_vec3( colorMap.z );","float shininess = colorMap.w;"].join("\n"),packLight:["vec4 packedLight;","packedLight.xyz = lightIntensity * lightColor * max( dot( lightVector, normal ), 0.0 ) * attenuation;","packedLight.w = lightIntensity * specular * max( dot( lightVector, normal ), 0.0 ) * attenuation;"].join("\n"),computeVertexPositionVS:["vec2 xy = texCoord * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4( xy, depth, 1.0 );","vec4 vertexPositionVS = matProjInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;"].join("\n"),computeSpecular:["vec3 halfVector = normalize( lightVector - normalize( vertexPositionVS.xyz ) );","float dotNormalHalf = max( dot( normal, halfVector ), 0.0 );","float specular = 0.31830988618 * ( shininess * 0.5 + 1.0 ) * pow( dotNormalHalf, shininess );"].join("\n"),combine:["gl_FragColor = vec4( lightIntensity * lightColor * max( dot( lightVector, normal ), 0.0 ) * ( diffuseColor + specular * specularColor ) * attenuation, 1.0 );"].join("\n")},ShaderDeferredCommon={commonUniforms:{matProjInverse:new three_module.Uniform(new three_module.Matrix4),viewWidth:new three_module.Uniform(800),viewHeight:new three_module.Uniform(600)}},ShaderDeferred={normalDepth:{uniforms:{},vertexShader:["varying vec3 vNormal;","varying vec4 vPosition;","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","void main() {","#include <begin_vertex>","#include <beginnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","\tvNormal = normalize( transformedNormal );","\tvPosition = gl_Position;","}"].join("\n"),fragmentShader:["varying vec3 vNormal;","varying vec4 vPosition;","void main() {","\tvec3 normal = vNormal;","\tvec4 position = vPosition;",DeferredShaderChunk.packNormalDepth,"\tgl_FragColor = packedNormalDepth;","}"].join("\n")},color:{uniforms:{map:new three_module.Uniform(null),offsetRepeat:new three_module.Uniform(new three_module.Vector4(0,0,1,1)),diffuse:new three_module.Uniform(new three_module.Color(0)),emissive:new three_module.Uniform(new three_module.Color(0)),specular:new three_module.Uniform(new three_module.Color(0)),shininess:new three_module.Uniform(30)},vertexShader:["#include <uv_pars_vertex>","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","void main() {","#include <uv_vertex>","#include <begin_vertex>","#include <beginnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 specular;","uniform float shininess;","#include <uv_pars_fragment>","#include <map_pars_fragment>",DeferredShaderChunk.packVector3,"void main() {","\tvec4 diffuseColor = vec4( diffuse, 1.0 );","\tvec3 emissiveColor = emissive;","\tvec3 specularColor = specular;","#include <map_fragment>",DeferredShaderChunk.packColor,"\tgl_FragColor = packedColor;","}"].join("\n")},emissiveLight:{uniforms:Object.assign({samplerColor:new three_module.Uniform(null)},ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;",DeferredShaderChunk.unpackFloat,"void main() {",DeferredShaderChunk.computeTextureCoord,DeferredShaderChunk.unpackColor,"\tgl_FragColor = vec4( emissiveColor, 1.0 );","}"].join("\n")},pointLight:{uniforms:Object.assign({samplerNormalDepth:new three_module.Uniform(null),samplerColor:new three_module.Uniform(null),lightColor:new three_module.Uniform(new three_module.Color(0)),lightPositionVS:new three_module.Uniform(new three_module.Vector3(0,1,0)),lightIntensity:new three_module.Uniform(1),lightRadius:new three_module.Uniform(1)},ShaderDeferredCommon.commonUniforms),vertexShader:["void main() {","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepth;","uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform float lightIntensity;","uniform float lightRadius;","uniform mat4 matProjInverse;",DeferredShaderChunk.unpackFloat,"void main() {",DeferredShaderChunk.computeTextureCoord,DeferredShaderChunk.unpackNormalDepth,DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = lightPositionVS - vertexPositionVS.xyz;","\tfloat distance = length( lightVector );","\tif ( distance > lightRadius ) discard;","\tlightVector = normalize( lightVector );",DeferredShaderChunk.unpackColor,DeferredShaderChunk.computeSpecular,"\t//float cutoff = 0.3;","\t//float denom = distance / lightRadius + 1.0;","\t//float attenuation = 1.0 / ( denom * denom );","\t//attenuation = ( attenuation - cutoff ) / ( 1.0 - cutoff );","\t//attenuation = max( attenuation, 0.0 );","\t//attenuation *= attenuation;","\t//diffuseColor *= saturate( -distance / lightRadius + 1.0 );","\t//float attenuation = 1.0;","\tfloat attenuation = saturate( -distance / lightRadius + 1.0 );",DeferredShaderChunk.combine,"}"].join("\n")},spotLight:{uniforms:Object.assign({samplerNormalDepth:new three_module.Uniform(null),samplerColor:new three_module.Uniform(null),lightColor:new three_module.Uniform(new three_module.Color(0)),lightDirectionVS:new three_module.Uniform(new three_module.Vector3(0,1,0)),lightPositionVS:new three_module.Uniform(new three_module.Vector3(0,1,0)),lightAngle:new three_module.Uniform(1),lightIntensity:new three_module.Uniform(1)},ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepth;","uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform vec3 lightDirectionVS;","uniform float lightAngle;","uniform float lightIntensity;","uniform mat4 matProjInverse;",DeferredShaderChunk.unpackFloat,"void main() {",DeferredShaderChunk.computeTextureCoord,DeferredShaderChunk.unpackNormalDepth,DeferredShaderChunk.computeVertexPositionVS,DeferredShaderChunk.unpackColor,"\tvec3 lightVector = normalize( lightPositionVS.xyz - vertexPositionVS.xyz );","\tfloat rho = dot( lightDirectionVS, lightVector );","\tfloat rhoMax = cos( lightAngle );","\tif ( rho <= rhoMax ) discard;","\tfloat theta = rhoMax + 0.0001;","\tfloat phi = rhoMax + 0.05;","\tfloat falloff = 4.0;","\tfloat spot = 0.0;","\tif ( rho >= phi ) {","\t\tspot = 1.0;","\t} else if ( rho <= theta ) {","\t\tspot = 0.0;","\t} else { ","\t\tspot = pow( ( rho - theta ) / ( phi - theta ), falloff );","\t}","\tdiffuseColor *= spot;",DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",DeferredShaderChunk.combine,"}"].join("\n")},directionalLight:{uniforms:Object.assign({samplerNormalDepth:new three_module.Uniform(null),samplerColor:new three_module.Uniform(null),lightColor:new three_module.Uniform(new three_module.Color(0)),lightDirectionVS:new three_module.Uniform(new three_module.Vector3(0,1,0)),lightIntensity:new three_module.Uniform(1)},ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepth;","uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightDirectionVS;","uniform float lightIntensity;","uniform mat4 matProjInverse;",DeferredShaderChunk.unpackFloat,"void main() {",DeferredShaderChunk.computeTextureCoord,DeferredShaderChunk.unpackNormalDepth,DeferredShaderChunk.computeVertexPositionVS,DeferredShaderChunk.unpackColor,"\tvec3 lightVector = normalize( lightDirectionVS );",DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",DeferredShaderChunk.combine,"}"].join("\n")},normalDepthShininess:{uniforms:{shininess:new three_module.Uniform(30)},vertexShader:["varying vec3 vNormal;","varying vec4 vPosition;","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","void main() {","#include <begin_vertex>","#include <beginnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","\tvNormal = normalize( transformedNormal );","\tvPosition = gl_Position;","}"].join("\n"),fragmentShader:["varying vec3 vNormal;","varying vec4 vPosition;","uniform float shininess;",DeferredShaderChunk.packNormal,"void main() {","\tvec3 normal = vNormal;","\tvec4 position = vPosition;",DeferredShaderChunk.packNormalDepthShininess,"\tgl_FragColor = packedNormalDepthShininess;","}"].join("\n")},pointLightPre:{uniforms:Object.assign({samplerNormalDepthShininess:new three_module.Uniform(null),lightColor:new three_module.Uniform(new three_module.Color(0)),lightPositionVS:new three_module.Uniform(new three_module.Vector3(0,1,0)),lightIntensity:new three_module.Uniform(1),lightRadius:new three_module.Uniform(1)},ShaderDeferredCommon.commonUniforms),vertexShader:["void main() {","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepthShininess;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform float lightIntensity;","uniform float lightRadius;","uniform mat4 matProjInverse;",DeferredShaderChunk.unpackFloat,DeferredShaderChunk.unpackVector2,"void main() {",DeferredShaderChunk.computeTextureCoord,DeferredShaderChunk.unpackNormalDepthShininess,DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = lightPositionVS - vertexPositionVS.xyz;","\tfloat distance = length( lightVector );","\tif ( distance > lightRadius ) discard;","\tlightVector = normalize( lightVector );",DeferredShaderChunk.computeSpecular,"\tfloat attenuation = saturate( -distance / lightRadius + 1.0 );",DeferredShaderChunk.packLight,"\tgl_FragColor = packedLight;","}"].join("\n")},spotLightPre:{uniforms:Object.assign({samplerNormalDepthShininess:new three_module.Uniform(null),lightColor:new three_module.Uniform(new three_module.Color(0)),lightDirectionVS:new three_module.Uniform(new three_module.Vector3(0,1,0)),lightPositionVS:new three_module.Uniform(new three_module.Vector3(0,1,0)),lightAngle:new three_module.Uniform(1),lightIntensity:new three_module.Uniform(1)},ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepthShininess;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform vec3 lightDirectionVS;","uniform float lightAngle;","uniform float lightIntensity;","uniform mat4 matProjInverse;",DeferredShaderChunk.unpackFloat,DeferredShaderChunk.unpackVector2,"void main() {",DeferredShaderChunk.computeTextureCoord,DeferredShaderChunk.unpackNormalDepthShininess,DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = normalize( lightPositionVS.xyz - vertexPositionVS.xyz );","\tfloat rho = dot( lightDirectionVS, lightVector );","\tfloat rhoMax = cos( lightAngle );","\tif ( rho <= rhoMax ) discard;","\tfloat theta = rhoMax + 0.0001;","\tfloat phi = rhoMax + 0.05;","\tfloat falloff = 4.0;","\tfloat spot = 0.0;","\tif ( rho >= phi ) {","\t\tspot = 1.0;","\t} else if ( rho <= theta ) {","\t\tspot = 0.0;","\t} else { ","\t\tspot = pow( ( rho - theta ) / ( phi - theta ), falloff );","\t}",DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",DeferredShaderChunk.packLight,"\tgl_FragColor = spot * packedLight;","}"].join("\n")},directionalLightPre:{uniforms:Object.assign({samplerNormalDepthShininess:new three_module.Uniform(null),lightColor:new three_module.Uniform(new three_module.Color(0)),lightDirectionVS:new three_module.Uniform(new three_module.Vector3(0,1,0)),lightIntensity:new three_module.Uniform(1)},ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepthShininess;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightDirectionVS;","uniform float lightIntensity;","uniform mat4 matProjInverse;",DeferredShaderChunk.unpackFloat,DeferredShaderChunk.unpackVector2,"void main() {",DeferredShaderChunk.computeTextureCoord,DeferredShaderChunk.unpackNormalDepthShininess,DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = normalize( lightDirectionVS );",DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",DeferredShaderChunk.packLight,"\tgl_FragColor = packedLight;","}"].join("\n")},reconstruction:{uniforms:Object.assign({samplerLight:new three_module.Uniform(null),map:new three_module.Uniform(null),offsetRepeat:new three_module.Uniform(new three_module.Vector4(0,0,1,1)),diffuse:new three_module.Uniform(new three_module.Color(0)),emissive:new three_module.Uniform(new three_module.Color(0)),specular:new three_module.Uniform(new three_module.Color(0)),shininess:new three_module.Uniform(30)},ShaderDeferredCommon.commonUniforms),vertexShader:["#include <uv_pars_vertex>","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","void main() {","#include <uv_vertex>","#include <begin_vertex>","#include <beginnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D samplerLight;","uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 specular;","uniform float shininess;","uniform float viewHeight;","uniform float viewWidth;","#include <uv_pars_fragment>","#include <map_pars_fragment>",DeferredShaderChunk.unpackFloat,"void main() {","\tvec4 diffuseColor = vec4( diffuse, 1.0 );","\tvec3 emissiveColor = emissive;","\tvec3 specularColor = specular;",DeferredShaderChunk.computeTextureCoord,"\tvec4 light = texture2D( samplerLight, texCoord );","#include <map_fragment>","\tvec3 diffuseFinal = diffuseColor.rgb * light.rgb;","\tvec3 emissiveFinal = emissiveColor;","\tvec3 specularFinal = specularColor * light.rgb * light.a;","\tgl_FragColor = vec4( diffuseFinal + emissiveFinal + specularFinal, 1.0 );","}"].join("\n")},final:{uniforms:{samplerResult:new three_module.Uniform(null)},vertexShader:["varying vec2 texCoord;","void main() {","\tvec4 pos = vec4( sign( position.xy ), 0.0, 1.0 );","\ttexCoord = pos.xy * vec2( 0.5 ) + 0.5;","\tgl_Position = pos;","}"].join("\n"),fragmentShader:["varying vec2 texCoord;","uniform sampler2D samplerResult;","void main() {","\tgl_FragColor = texture2D( samplerResult, texCoord );","}"].join("\n")}}}}]);
//# sourceMappingURL=8.3cc1079fb8472c44bc5a.bundle.js.map