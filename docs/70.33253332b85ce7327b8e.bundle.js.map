{"version":3,"file":"70.33253332b85ce7327b8e.bundle.js","sources":["webpack:///./src/chapter8/6.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport { OBJLoader } from '../../node_modules/three/examples/jsm/loaders/OBJLoader';\r\nimport { MTLLoader } from '../../node_modules/three/examples/jsm/loaders/MTLLoader';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 50;\r\n  camera.lookAt(new THREE.Vector3(0, 10, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xaaaaff));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  // spotlight\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(0, 40, 30);\r\n  spotLight.intensity = 2;\r\n  scene.add(spotLight);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  let mesh: THREE.Group;\r\n\r\n  const mtlLoader = new MTLLoader();\r\n  mtlLoader.load('./assets/butterfly.mtl', materials => {\r\n    const objLoader = new OBJLoader();\r\n    objLoader.setMaterials((materials as any) as THREE.Material[]);\r\n    objLoader.materials;\r\n    objLoader.load('./assets/butterfly.obj', object => {\r\n      const wing2 = object.children[5] as THREE.Mesh;\r\n      const wing1 = object.children[4] as THREE.Mesh;\r\n      const wing1material = wing1.material as THREE.Material;\r\n      const wing2material = wing2.material as THREE.Material;\r\n\r\n      wing1material.opacity = 0.6;\r\n      wing1material.transparent = true;\r\n      wing1material.depthTest = false;\r\n      wing1material.side = THREE.DoubleSide;\r\n\r\n      wing2material.opacity = 0.6;\r\n      wing2material.depthTest = false;\r\n      wing2material.transparent = true;\r\n      wing2material.side = THREE.DoubleSide;\r\n\r\n      object.scale.set(140, 140, 140);\r\n      mesh = object;\r\n      scene.add(mesh);\r\n\r\n      object.rotation.x = 0.2;\r\n      object.rotation.y = -1.3;\r\n    });\r\n  });\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    if (mesh) {\r\n      mesh.rotation.y += 0.006;\r\n    }\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}