{"version":3,"file":"60.f48b93ed6205ae3d8d7b.bundle.js","sources":["webpack:///./src/chapter8/3.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 50;\r\n  camera.lookAt(new THREE.Vector3(-20, 0, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  const createMesh = (geom: THREE.Geometry) => {\r\n    const meshMaterial = new THREE.MeshBasicMaterial({\r\n      vertexColors: THREE.VertexColors,\r\n      wireframe: true,\r\n      wireframeLinewidth: 2,\r\n      color: 0xaaaaaa\r\n    });\r\n    meshMaterial.side = THREE.DoubleSide;\r\n    return new THREE.Mesh(geom, meshMaterial);\r\n  };\r\n\r\n  let knot = createMesh(new THREE.TorusKnotGeometry(10, 1, 64, 8, 2, 3));\r\n  scene.add(knot);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  let loadedMesh: THREE.Mesh;\r\n\r\n  /* gui */\r\n  const controls = {\r\n    radius: (knot.geometry as THREE.TorusKnotGeometry).parameters.radius,\r\n    tube: 0.3,\r\n    radialSegments: (knot.geometry as THREE.TorusKnotGeometry).parameters\r\n      .radialSegments,\r\n    tubularSegments: (knot.geometry as THREE.TorusKnotGeometry).parameters\r\n      .tubularSegments,\r\n    p: (knot.geometry as THREE.TorusKnotGeometry).parameters.p,\r\n    q: (knot.geometry as THREE.TorusKnotGeometry).parameters.q,\r\n    redraw: () => {\r\n      scene.remove(knot);\r\n      knot = createMesh(\r\n        new THREE.TorusKnotGeometry(\r\n          controls.radius,\r\n          controls.tube,\r\n          Math.round(controls.radialSegments),\r\n          Math.round(controls.tubularSegments),\r\n          Math.round(controls.p),\r\n          Math.round(controls.q)\r\n        )\r\n      );\r\n      scene.add(knot);\r\n    },\r\n    save: () => {\r\n      const result = knot.toJSON();\r\n      localStorage.setItem('json', JSON.stringify(result));\r\n    },\r\n    load: () => {\r\n      scene.remove(loadedMesh);\r\n      const json = localStorage.getItem('json');\r\n      if (json) {\r\n        const loadedGeometry = JSON.parse(json);\r\n        const loader = new THREE.ObjectLoader();\r\n        loadedMesh = loader.parse(loadedGeometry);\r\n        loadedMesh.position.x -= 50;\r\n        scene.add(loadedMesh);\r\n      }\r\n    }\r\n  };\r\n\r\n  const gui = new dat.GUI();\r\n  const ioGui = gui.addFolder('Save & Load');\r\n  ioGui.add(controls, 'save').onChange(controls.save);\r\n  ioGui.add(controls, 'load').onChange(controls.load);\r\n  const meshGui = gui.addFolder('mesh');\r\n  meshGui.add(controls, 'radius', 0, 40).onChange(controls.redraw);\r\n  meshGui.add(controls, 'tube', 0, 40).onChange(controls.redraw);\r\n  meshGui\r\n    .add(controls, 'radialSegments', 0, 400)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  meshGui\r\n    .add(controls, 'tubularSegments', 1, 20)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  meshGui\r\n    .add(controls, 'p', 1, 10)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  meshGui\r\n    .add(controls, 'q', 1, 15)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    knot.rotation.y = step += 0.01;\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  controls.redraw();\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}