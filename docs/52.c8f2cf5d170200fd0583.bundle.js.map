{"version":3,"file":"52.c8f2cf5d170200fd0583.bundle.js","sources":["webpack:///./src/chapter6/6.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n// import 'imports-loader?THREE=three!../../node_modules/three/examples/js/ParametricGeometries';\r\n\r\n// declare module 'three' {\r\n//   const ParametricGeometries: {\r\n//     [func: string]: (u: number, v: number, dest: THREE.Vector3) => void;\r\n//   };\r\n// }\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 50;\r\n  camera.position.z = 50;\r\n  camera.lookAt(new THREE.Vector3(10, -20, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  /* spotLight */\r\n  const spotLight = new THREE.DirectionalLight(0xffffff);\r\n  spotLight.position.set(-20, 250, -50);\r\n  spotLight.target.position.x = 30;\r\n  spotLight.target.position.y = -40;\r\n  spotLight.target.position.z = -20;\r\n  spotLight.intensity = 0.3;\r\n\r\n  const klein = (u: number, v: number, dest: THREE.Vector3) => {\r\n    u *= Math.PI;\r\n    v *= 2 * Math.PI;\r\n    u = u * 2;\r\n    var x, y, z;\r\n    if (u < Math.PI) {\r\n      x =\r\n        3 * Math.cos(u) * (1 + Math.sin(u)) +\r\n        2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\r\n      z =\r\n        -8 * Math.sin(u) -\r\n        2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\r\n    } else {\r\n      x =\r\n        3 * Math.cos(u) * (1 + Math.sin(u)) +\r\n        2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\r\n      z = -8 * Math.sin(u);\r\n    }\r\n    y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\r\n    dest.set(x, y, z);\r\n  };\r\n\r\n  const radialWave = (u: number, v: number, dest: THREE.Vector3) => {\r\n    const r = 50;\r\n    const x = Math.sin(u) * r;\r\n    const z = Math.sin(v / 2) * 2 * r;\r\n    const y = (Math.sin(u * 4 * Math.PI) + Math.cos(v * 2 * Math.PI)) * 2.8;\r\n    dest.set(x, y, z);\r\n  };\r\n\r\n  const createMesh = (geom: THREE.Geometry) => {\r\n    geom.applyMatrix(new THREE.Matrix4().makeTranslation(-25, 0, -25));\r\n    const meshMaterial = new THREE.MeshPhongMaterial({\r\n      specular: 0xaaaafff,\r\n      color: 0x3399ff,\r\n      shininess: 40,\r\n      side: THREE.DoubleSide\r\n    });\r\n    meshMaterial.side = THREE.DoubleSide;\r\n    const mesh = new THREE.Mesh(geom, meshMaterial);\r\n    return mesh;\r\n  };\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  let parametricMesh: THREE.Mesh;\r\n  const controls = {\r\n    func: 'radialWave',\r\n    slices: 120,\r\n    stacks: 120,\r\n    redraw: () => {\r\n      scene.remove(parametricMesh);\r\n      const func = controls.func === 'radialWave' ? radialWave : klein; // THREE.ParametricGeometries.klein\r\n      parametricMesh = createMesh(\r\n        new THREE.ParametricGeometry(func, controls.slices, controls.stacks)\r\n      );\r\n      scene.add(parametricMesh);\r\n    }\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'func', ['klein', 'radialWave']).onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'slices', 10, 200)\r\n    .step(5)\r\n    .onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'stacks', 10, 200)\r\n    .step(5)\r\n    .onChange(controls.redraw);\r\n\r\n  controls.redraw();\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    parametricMesh.rotation.y = step += 0.01;\r\n    parametricMesh.rotation.x = step;\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}