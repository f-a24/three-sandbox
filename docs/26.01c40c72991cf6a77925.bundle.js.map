{"version":3,"file":"26.01c40c72991cf6a77925.bundle.js","sources":["webpack:///./src/chapter6/4.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nimport createMultiMaterialObject from '../utils/createMultiMaterialObject';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 50;\r\n  camera.lookAt(new THREE.Vector3(10, 0, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  const createMesh = (geom: THREE.Geometry) => {\r\n    const meshMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0x00ff00,\r\n      transparent: true,\r\n      opacity: 0.2\r\n    });\r\n    const wireFrameMat = new THREE.MeshBasicMaterial();\r\n    wireFrameMat.wireframe = true;\r\n    const mesh = createMultiMaterialObject(geom, [meshMaterial, wireFrameMat]);\r\n    return mesh;\r\n  };\r\n\r\n  let spGroup: THREE.Object3D;\r\n  let tubeMesh: THREE.Group;\r\n  const generatePoints = (\r\n    points: THREE.Vector3[],\r\n    segments: number,\r\n    radius: number,\r\n    radiusSegments: number,\r\n    closed: boolean\r\n  ) => {\r\n    spGroup = new THREE.Object3D();\r\n    const material = new THREE.MeshBasicMaterial({\r\n      color: 0xff0000,\r\n      transparent: false\r\n    });\r\n    points.forEach(point => {\r\n      const spGeom = new THREE.SphereGeometry(0.2);\r\n      const spMesh = new THREE.Mesh(spGeom, material);\r\n      spMesh.position.copy(point);\r\n      spGroup.add(spMesh);\r\n    });\r\n    scene.add(spGroup);\r\n    const tubeGeometry = new THREE.TubeGeometry(\r\n      new THREE.CatmullRomCurve3(points),\r\n      segments,\r\n      radius,\r\n      radiusSegments,\r\n      closed\r\n    );\r\n    tubeMesh = createMesh(tubeGeometry);\r\n    scene.add(tubeMesh);\r\n  };\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    numberOfPoints: 5,\r\n    segments: 64,\r\n    radius: 1,\r\n    radiusSegments: 8,\r\n    closed: false,\r\n    taper: 'no taper',\r\n    points: [] as THREE.Vector3[],\r\n    newPoints: () => {\r\n      const points = [] as THREE.Vector3[];\r\n      for (let i = 0; i < controls.numberOfPoints; i++) {\r\n        const randomX = -20 + Math.round(Math.random() * 50);\r\n        const randomY = -15 + Math.round(Math.random() * 40);\r\n        const randomZ = -20 + Math.round(Math.random() * 40);\r\n        points.push(new THREE.Vector3(randomX, randomY, randomZ));\r\n      }\r\n      controls.points = points;\r\n      controls.redraw();\r\n    },\r\n    redraw: () => {\r\n      scene.remove(spGroup);\r\n      scene.remove(tubeMesh);\r\n      generatePoints(\r\n        controls.points,\r\n        controls.segments,\r\n        controls.radius,\r\n        controls.radiusSegments,\r\n        controls.closed\r\n      );\r\n    }\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'newPoints');\r\n  gui\r\n    .add(controls, 'numberOfPoints', 2, 15)\r\n    .step(1)\r\n    .onChange(controls.newPoints);\r\n  gui\r\n    .add(controls, 'segments', 0, 200)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui.add(controls, 'radius', 0, 10).onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'radiusSegments', 0, 100)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui.add(controls, 'closed').onChange(controls.redraw);\r\n\r\n  controls.newPoints();\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    spGroup.rotation.y = step;\r\n    tubeMesh.rotation.y = step += 0.01;\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}