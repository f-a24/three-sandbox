{"version":3,"file":"49.54c1f27828cf1f55e792.bundle.js","sources":["webpack:///./src/chapter2/5.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  let camera:\r\n    | THREE.OrthographicCamera\r\n    | THREE.PerspectiveCamera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  scene.add(camera);\r\n  camera.position.x = 120;\r\n  camera.position.y = 60;\r\n  camera.position.z = 180;\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  /* plane */\r\n  const planeGeometry = new THREE.PlaneGeometry(180, 180);\r\n  const planeMaterial = new THREE.MeshLambertMaterial({ color: 0xffffff });\r\n  const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n  plane.receiveShadow = true;\r\n  plane.rotation.x = -0.5 * Math.PI;\r\n  plane.position.x = 0;\r\n  plane.position.y = 0;\r\n  plane.position.z = 0;\r\n  scene.add(plane);\r\n\r\n  const cubeGeometry = new THREE.BoxGeometry(4, 4, 4);\r\n  const cubeMaterial = new THREE.MeshLambertMaterial({ color: 0x00ee22 });\r\n  for (let j = 0; j < planeGeometry.parameters.height / 5; j++) {\r\n    for (let i = 0; i < planeGeometry.parameters.width / 5; i++) {\r\n      const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\n      cube.position.z = -(planeGeometry.parameters.height / 2) + 2 + j * 5;\r\n      cube.position.x = -(planeGeometry.parameters.width / 2) + 2 + i * 5;\r\n      cube.position.y = 2;\r\n      scene.add(cube);\r\n    }\r\n  }\r\n\r\n  const lookAtGeom = new THREE.SphereGeometry(2);\r\n  const lookAtMesh = new THREE.Mesh(\r\n    lookAtGeom,\r\n    new THREE.MeshLambertMaterial({ color: 0xff0000 })\r\n  );\r\n  scene.add(lookAtMesh);\r\n\r\n  /* directionalLight */\r\n  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.7);\r\n  directionalLight.position.set(-20, 40, 60);\r\n  scene.add(directionalLight);\r\n\r\n  /* ambientLight */\r\n  const ambientLight = new THREE.AmbientLight(0x292929);\r\n  scene.add(ambientLight);\r\n\r\n  const controls = {\r\n    perspective: 'Perspective',\r\n    switchCamera: () => {\r\n      if (camera instanceof THREE.PerspectiveCamera) {\r\n        camera = new THREE.OrthographicCamera(\r\n          window.innerWidth / -16,\r\n          window.innerWidth / 16,\r\n          window.innerHeight / 16,\r\n          window.innerHeight / -16,\r\n          -200,\r\n          500\r\n        );\r\n        camera.position.x = 120;\r\n        camera.position.y = 60;\r\n        camera.position.z = 180;\r\n        camera.lookAt(scene.position);\r\n        controls.perspective = 'Orthographic';\r\n      } else {\r\n        camera = new THREE.PerspectiveCamera(\r\n          45,\r\n          window.innerWidth / window.innerHeight,\r\n          0.1,\r\n          1000\r\n        );\r\n        camera.position.x = 120;\r\n        camera.position.y = 60;\r\n        camera.position.z = 180;\r\n        camera.lookAt(scene.position);\r\n        controls.perspective = 'Perspective';\r\n      }\r\n    }\r\n  };\r\n\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'switchCamera');\r\n  gui.add(controls, 'perspective').listen();\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const stats = (() => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n\r\n    return statsObj;\r\n  })();\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const render = () => {\r\n    stats.update();\r\n    step += 0.02;\r\n    if (camera instanceof THREE.Camera) {\r\n      const x = 10 + 100 * Math.sin(step);\r\n      camera.lookAt(new THREE.Vector3(x, 10, 0));\r\n      lookAtMesh.position.copy(new THREE.Vector3(x, 10, 0));\r\n    }\r\n    requestAnimationFrame(render);\r\n    renderer.render(scene, camera);\r\n  };\r\n  render();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}