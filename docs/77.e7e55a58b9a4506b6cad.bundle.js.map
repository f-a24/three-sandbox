{"version":3,"file":"77.e7e55a58b9a4506b6cad.bundle.js","sources":["webpack:///./src/chapter9/2.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n// THREE.Projector has been moved to /examples/js/renderers/Projector.jsが出て効かない\r\n// import 'imports-loader?THREE=three!../../node_modules/three/examples/js/renderers/Projector.js';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 30;\r\n  camera.lookAt(scene.position);\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n  // 無くても良さ気？\r\n  // const projector = new (THREE as any).Projector();\r\n\r\n  const planeGeometry = new THREE.PlaneGeometry(60, 20, 1, 1);\r\n  const planeMaterial = new THREE.MeshLambertMaterial({ color: 0xffffff });\r\n  const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n  plane.rotation.x = -0.5 * Math.PI;\r\n  plane.position.x = 15;\r\n  plane.position.y = 0;\r\n  plane.position.z = 0;\r\n\r\n  scene.add(plane);\r\n\r\n  const cubeGeometry = new THREE.BoxGeometry(4, 4, 4);\r\n  const cubeMaterial = new THREE.MeshLambertMaterial({ color: 0xff0000 });\r\n  const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\n\r\n  cube.position.x = -9;\r\n  cube.position.y = 3;\r\n  cube.position.z = 0;\r\n\r\n  scene.add(cube);\r\n\r\n  const sphereGeometry = new THREE.SphereGeometry(4, 20, 20);\r\n  const sphereMaterial = new THREE.MeshLambertMaterial({ color: 0x7777ff });\r\n  const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n\r\n  sphere.position.x = 20;\r\n  sphere.position.y = 0;\r\n  sphere.position.z = 2;\r\n\r\n  scene.add(sphere);\r\n\r\n  const cylinderGeometry = new THREE.CylinderGeometry(2, 2, 20);\r\n  const cylinderMaterial = new THREE.MeshLambertMaterial({ color: 0x77ff77 });\r\n  const cylinder = new THREE.Mesh(cylinderGeometry, cylinderMaterial);\r\n  cylinder.position.set(0, 0, 1);\r\n\r\n  scene.add(cylinder);\r\n\r\n  const ambientLight = new THREE.AmbientLight(0x0c0c0c);\r\n  scene.add(ambientLight);\r\n\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(-40, 60, -10);\r\n  scene.add(spotLight);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* GUI */\r\n  let tube: THREE.Mesh;\r\n  const controls = {\r\n    rotationSpeed: 0.02,\r\n    bouncingSpeed: 0.03,\r\n    scalingSpeed: 0.03,\r\n    showRay: false\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'rotationSpeed', 0, 0.5);\r\n  gui.add(controls, 'bouncingSpeed', 0, 0.5);\r\n  gui.add(controls, 'scalingSpeed', 0, 0.5);\r\n  gui.add(controls, 'showRay').onChange(() => {\r\n    if (tube) scene.remove(tube);\r\n  });\r\n\r\n  document.addEventListener(\r\n    'mousedown',\r\n    e => {\r\n      let vector = new THREE.Vector3(\r\n        (e.clientX / window.innerWidth) * 2 - 1,\r\n        -(e.clientY / window.innerHeight) * 2 + 1,\r\n        0.5\r\n      );\r\n      vector = vector.unproject(camera);\r\n      const raycaster = new THREE.Raycaster(\r\n        camera.position,\r\n        vector.sub(camera.position).normalize()\r\n      );\r\n      const intersects = raycaster.intersectObjects([sphere, cylinder, cube]);\r\n      if (intersects.length > 0) {\r\n        console.log(intersects[0]);\r\n        ((intersects[0].object as THREE.Mesh)\r\n          .material as THREE.Material).transparent = true;\r\n        ((intersects[0].object as THREE.Mesh)\r\n          .material as THREE.Material).opacity = 0.1;\r\n      }\r\n    },\r\n    false\r\n  );\r\n  document.addEventListener(\r\n    'mousemove',\r\n    e => {\r\n      if (controls.showRay) {\r\n        let vector = new THREE.Vector3(\r\n          (e.clientX / window.innerWidth) * 2 - 1,\r\n          -(e.clientY / window.innerHeight) * 2 + 1,\r\n          0.5\r\n        );\r\n        vector = vector.unproject(camera);\r\n        const raycaster = new THREE.Raycaster(\r\n          camera.position,\r\n          vector.sub(camera.position).normalize()\r\n        );\r\n        const intersects = raycaster.intersectObjects([sphere, cylinder, cube]);\r\n        if (intersects.length > 0) {\r\n          const points = [];\r\n          points.push(new THREE.Vector3(-30, 39.8, 30));\r\n          points.push(intersects[0].point);\r\n          const mat = new THREE.MeshBasicMaterial({\r\n            color: 0xff0000,\r\n            transparent: true,\r\n            opacity: 0.6\r\n          });\r\n          const tubeGeometry = new THREE.TubeGeometry(\r\n            new THREE.CatmullRomCurve3(points),\r\n            60,\r\n            0.001\r\n          );\r\n          if (tube) scene.remove(tube);\r\n          if (controls.showRay) {\r\n            tube = new THREE.Mesh(tubeGeometry, mat);\r\n            scene.add(tube);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    false\r\n  );\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* render */\r\n  let step = 0;\r\n  let scalingStep = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    cube.rotation.x += controls.rotationSpeed;\r\n    cube.rotation.y += controls.rotationSpeed;\r\n    cube.rotation.z += controls.rotationSpeed;\r\n\r\n    step += controls.bouncingSpeed;\r\n    sphere.position.x = 20 + 10 * Math.cos(step);\r\n    sphere.position.y = 2 + 10 * Math.abs(Math.sin(step));\r\n\r\n    scalingStep += controls.scalingSpeed;\r\n    const scaleX = Math.abs(Math.sin(scalingStep / 4));\r\n    const scaleY = Math.abs(Math.cos(scalingStep / 5));\r\n    const scaleZ = Math.abs(Math.sin(scalingStep / 7));\r\n    cylinder.scale.set(scaleX, scaleY, scaleZ);\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}