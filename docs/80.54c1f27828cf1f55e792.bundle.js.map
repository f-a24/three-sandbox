{"version":3,"file":"80.54c1f27828cf1f55e792.bundle.js","sources":["webpack:///./src/appendix-B/2.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as dat from 'dat.gui';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/loaders/TGALoader.js';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/loaders/MMDLoader.js';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/animation/CCDIKSolver.js';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/animation/MMDPhysics.js';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/animation/MMDAnimationHelper.js';\r\n\r\n(window as any).MMDParser = require('../../node_modules/three/examples/js/libs/mmdparser.min.js');\r\n(window as any).Ammo = require('../../node_modules/three/examples/js/libs/ammo.js')();\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    1,\r\n    2000\r\n  );\r\n  camera.position.z = 30;\r\n  camera.lookAt(scene.position);\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.setClearColor(new THREE.Color(0xffffff));\r\n\r\n  const ambient = new THREE.AmbientLight(0x888888);\r\n  scene.add(ambient);\r\n  const directionalLight = new THREE.DirectionalLight(0x666666);\r\n  directionalLight.position.set(-1, 1, 1).normalize();\r\n  scene.add(directionalLight);\r\n\r\n  /* GUI */\r\n  const initGui = () => {\r\n    const gui = new dat.GUI();\r\n    const dictionary = mesh.morphTargetDictionary;\r\n    const controls = {} as { [key: string]: any };\r\n    const keys = [];\r\n    const files = { default: -1 };\r\n\r\n    const poses = gui.addFolder('Poses');\r\n    const morphs = gui.addFolder('Morphs');\r\n\r\n    const getBaseName = (s: string) => s.slice(s.lastIndexOf('/') + 1);\r\n\r\n    const onChangeMorph = () => {\r\n      keys.forEach((key, i) => {\r\n        mesh.morphTargetInfluences[i] = controls[key];\r\n      });\r\n    };\r\n\r\n    const onChangePose = () => {\r\n      const index = parseInt(controls.pose);\r\n      if (index === -1) {\r\n        (mesh as any).pose();\r\n      } else {\r\n        helper.pose(mesh, vpds[index]);\r\n      }\r\n    };\r\n\r\n    controls.pose = -1;\r\n    vpdFiles.forEach((file, i) => {\r\n      controls[getBaseName(file)] = false;\r\n      files[getBaseName(file)] = i;\r\n    });\r\n    poses.add(controls, 'pose', files).onChange(onChangePose);\r\n\r\n    Object.keys(dictionary).forEach(key => {\r\n      controls[key] = 0.0;\r\n      keys.push(key);\r\n      morphs.add(controls, key, 0.0, 1.0, 0.01).onChange(onChangeMorph);\r\n    });\r\n\r\n    onChangeMorph();\r\n    onChangePose();\r\n\r\n    poses.open();\r\n    morphs.open();\r\n  };\r\n\r\n  const onProgress = xhr => {\r\n    if (xhr.lengthComputable) {\r\n      const percentComplete = (xhr.loaded / xhr.total) * 100;\r\n      console.log(Math.round(percentComplete) + '% downloaded');\r\n    }\r\n  };\r\n\r\n  const onError = error => {\r\n    console.log('ERROR:', error);\r\n  };\r\n\r\n  let mesh: THREE.Mesh;\r\n  const vpds = [];\r\n\r\n  //   const helper = new (THREE as any).MMDHelper(renderer);\r\n  const helper = new (THREE as any).MMDAnimationHelper();\r\n  const loader = new (THREE as any).MMDLoader();\r\n\r\n  const vpdFiles = [\r\n    'vpds/01.vpd',\r\n    'vpds/02.vpd',\r\n    'vpds/03.vpd',\r\n    'vpds/04.vpd',\r\n    'vpds/05.vpd',\r\n    'vpds/06.vpd',\r\n    'vpds/07.vpd',\r\n    'vpds/08.vpd',\r\n    'vpds/09.vpd',\r\n    'vpds/10.vpd',\r\n    'vpds/11.vpd'\r\n  ];\r\n\r\n  loader.load(\r\n    'model/kizunaai.pmx',\r\n    (object: THREE.Mesh) => {\r\n      mesh = object;\r\n      mesh.position.y = -10;\r\n      scene.add(mesh);\r\n      let vpdIndex = 0;\r\n      const loadVpd = () => {\r\n        const vpdFile = vpdFiles[vpdIndex];\r\n        loader.loadVPD(\r\n          vpdFile,\r\n          false,\r\n          vpd => {\r\n            vpds.push(vpd);\r\n            vpdIndex++;\r\n            if (vpdIndex < vpdFiles.length) {\r\n              loadVpd();\r\n            } else {\r\n              initGui();\r\n            }\r\n          },\r\n          onProgress,\r\n          onError\r\n        );\r\n      };\r\n      loadVpd();\r\n    },\r\n    onProgress,\r\n    onError\r\n  );\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  const renderScene = () => {\r\n    camera.lookAt(scene.position);\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n\r\n  /* copyright */\r\n  const copyright = document.createElement('span');\r\n  copyright.innerHTML = '© Kizuna AI';\r\n  copyright.className = 'copyright';\r\n  document.body.appendChild(copyright);\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}