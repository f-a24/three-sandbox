{"version":3,"file":"33.c8f2cf5d170200fd0583.bundle.js","sources":["webpack:///./src/chapter1/1.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 30;\r\n  camera.lookAt(scene.position);\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  /* axes */\r\n  const axes = new THREE.AxesHelper(20);\r\n  scene.add(axes);\r\n\r\n  /* plane */\r\n  const planeGeometry = new THREE.PlaneGeometry(60, 20);\r\n  const planeMaterial = new THREE.MeshLambertMaterial({\r\n    color: 0xcccccc\r\n  });\r\n  const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n  plane.rotation.x = -0.5 * Math.PI;\r\n  plane.position.x = 15;\r\n  plane.position.y = 0;\r\n  plane.position.z = 0;\r\n  plane.receiveShadow = true;\r\n  scene.add(plane);\r\n\r\n  /* cube */\r\n  const cubeGeometry = new THREE.BoxGeometry(4, 4, 4);\r\n  const cubeMaterial = new THREE.MeshLambertMaterial({\r\n    color: 0xff0000\r\n  });\r\n  const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\n  cube.position.x = -4;\r\n  cube.position.y = 3;\r\n  cube.position.z = 0;\r\n  cube.castShadow = true;\r\n  scene.add(cube);\r\n\r\n  /* sphere */\r\n  const sphereGeometry = new THREE.SphereGeometry(4, 20, 20);\r\n  const sphereMaterial = new THREE.MeshLambertMaterial({\r\n    color: 0x7777ff\r\n  });\r\n  const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n  sphere.position.x = 20;\r\n  sphere.position.y = 4;\r\n  sphere.position.z = 2;\r\n  sphere.castShadow = true;\r\n  scene.add(sphere);\r\n\r\n  /* light */\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(-20, 30, -5);\r\n  spotLight.castShadow = true;\r\n  scene.add(spotLight);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    rotationSpeed: 0.02,\r\n    bouncingSpeed: 0.02\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'rotationSpeed', 0, 0.5);\r\n  gui.add(controls, 'bouncingSpeed', 0, 0.5);\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n    cube.rotation.x += controls.rotationSpeed;\r\n    cube.rotation.y += controls.rotationSpeed;\r\n    cube.rotation.z += controls.rotationSpeed;\r\n\r\n    step += controls.bouncingSpeed;\r\n    sphere.position.x = 20 + 10 * Math.cos(step);\r\n    sphere.position.y = 2 + 10 * Math.abs(Math.sin(step));\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}