{"version":3,"file":"39.e7e55a58b9a4506b6cad.bundle.js","sources":["webpack:///./src/chapter7/10.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\nimport createMultiMaterialObject from '../utils/createMultiMaterialObject';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = -30;\r\n  camera.position.y = 40;\r\n  camera.position.z = 50;\r\n  camera.lookAt(new THREE.Vector3(10, 0, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0x000000));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  const generateSprite = () => {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 16;\r\n    canvas.height = 16;\r\n    const context = canvas.getContext('2d');\r\n    const gradient = context.createRadialGradient(\r\n      canvas.width / 2,\r\n      canvas.height / 2,\r\n      0,\r\n      canvas.width / 2,\r\n      canvas.height / 2,\r\n      canvas.width / 2\r\n    );\r\n    gradient.addColorStop(0, 'rgba(255,255,255,1)');\r\n    gradient.addColorStop(0.2, 'rgba(0,255,255,1)');\r\n    gradient.addColorStop(0.4, 'rgba(0,0,64,1)');\r\n    gradient.addColorStop(1, 'rgba(0,0,0,1)');\r\n    context.fillStyle = gradient;\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    const texture = new THREE.Texture(canvas);\r\n    texture.needsUpdate = true;\r\n    return texture;\r\n  };\r\n\r\n  const createPoints = (geom: THREE.Geometry) => {\r\n    const material = new THREE.PointsMaterial({\r\n      color: 0xffffff,\r\n      size: 3,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      map: generateSprite(),\r\n      depthWrite: false\r\n    });\r\n    return new THREE.Points(geom, material);\r\n  };\r\n\r\n  const createMesh = (geom: THREE.Geometry) => {\r\n    const meshMaterial = new THREE.MeshNormalMaterial({});\r\n    meshMaterial.side = THREE.DoubleSide;\r\n    return createMultiMaterialObject(geom, [meshMaterial]);\r\n  };\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  let knot: THREE.Points | THREE.Object3D;\r\n  const controls = {\r\n    radius: 13,\r\n    tube: 1.7,\r\n    radialSegments: 156,\r\n    tubularSegments: 12,\r\n    p: 5,\r\n    q: 4,\r\n    asParticles: false,\r\n    rotate: false,\r\n    redraw: () => {\r\n      if (knot) scene.remove(knot);\r\n      const geom = new THREE.TorusKnotGeometry(\r\n        controls.radius,\r\n        controls.tube,\r\n        Math.round(controls.radialSegments),\r\n        Math.round(controls.tubularSegments),\r\n        Math.round(controls.p),\r\n        Math.round(controls.q)\r\n      );\r\n      knot = controls.asParticles ? createPoints(geom) : createMesh(geom);\r\n      scene.add(knot);\r\n    }\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'radius', 0, 40).onChange(controls.redraw);\r\n  gui.add(controls, 'tube', 0, 40).onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'radialSegments', 0, 400)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'tubularSegments', 1, 20)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'p', 1, 10)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui\r\n    .add(controls, 'q', 1, 15)\r\n    .step(1)\r\n    .onChange(controls.redraw);\r\n  gui.add(controls, 'asParticles').onChange(controls.redraw);\r\n  gui.add(controls, 'rotate').onChange(controls.redraw);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    if (controls.rotate) {\r\n      knot.rotation.y = step += 0.01;\r\n    }\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  controls.redraw();\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}