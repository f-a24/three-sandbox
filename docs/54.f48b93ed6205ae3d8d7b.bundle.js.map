{"version":3,"file":"54.f48b93ed6205ae3d8d7b.bundle.js","sources":["webpack:///./src/chapter7/5.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = 20;\r\n  camera.position.y = 0;\r\n  camera.position.z = 150;\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0x000000));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n\r\n  /* context2d */\r\n  const getTexture = () => {\r\n    const canvasEl = document.createElement('canvas');\r\n    canvasEl.width = 32;\r\n    canvasEl.height = 32;\r\n    const ctx = canvasEl.getContext('2d');\r\n\r\n    // the body\r\n    ctx.translate(-81, -84);\r\n    ctx.fillStyle = 'orange';\r\n    ctx.beginPath();\r\n    ctx.moveTo(83, 116);\r\n    ctx.lineTo(83, 102);\r\n    ctx.bezierCurveTo(83, 94, 89, 88, 97, 88);\r\n    ctx.bezierCurveTo(105, 88, 111, 94, 111, 102);\r\n    ctx.lineTo(111, 116);\r\n    ctx.lineTo(106.333, 111.333);\r\n    ctx.lineTo(101.666, 116);\r\n    ctx.lineTo(97, 111.333);\r\n    ctx.lineTo(92.333, 116);\r\n    ctx.lineTo(87.666, 111.333);\r\n    ctx.lineTo(83, 116);\r\n    ctx.fill();\r\n\r\n    // the eyes\r\n    ctx.fillStyle = 'white';\r\n    ctx.beginPath();\r\n    ctx.moveTo(91, 96);\r\n    ctx.bezierCurveTo(88, 96, 87, 99, 87, 101);\r\n    ctx.bezierCurveTo(87, 103, 88, 106, 91, 106);\r\n    ctx.bezierCurveTo(94, 106, 95, 103, 95, 101);\r\n    ctx.bezierCurveTo(95, 99, 94, 96, 91, 96);\r\n    ctx.moveTo(103, 96);\r\n    ctx.bezierCurveTo(100, 96, 99, 99, 99, 101);\r\n    ctx.bezierCurveTo(99, 103, 100, 106, 103, 106);\r\n    ctx.bezierCurveTo(106, 106, 107, 103, 107, 101);\r\n    ctx.bezierCurveTo(107, 99, 106, 96, 103, 96);\r\n    ctx.fill();\r\n\r\n    // the pupils\r\n    ctx.fillStyle = 'blue';\r\n    ctx.beginPath();\r\n    ctx.arc(101, 102, 2, 0, Math.PI * 2, true);\r\n    ctx.fill();\r\n    ctx.beginPath();\r\n    ctx.arc(89, 102, 2, 0, Math.PI * 2, true);\r\n    ctx.fill();\r\n\r\n    const texture = new THREE.CanvasTexture(canvasEl);\r\n    texture.needsUpdate = true;\r\n    return texture;\r\n  };\r\n\r\n  let cloud: THREE.Points;\r\n  const createPoints = (\r\n    size: number,\r\n    transparent: boolean,\r\n    opacity: number,\r\n    sizeAttenuation: boolean,\r\n    color: number\r\n  ) => {\r\n    const geom = new THREE.Geometry();\r\n    const material = new THREE.PointsMaterial({\r\n      size: size,\r\n      transparent: transparent,\r\n      opacity: opacity,\r\n      map: getTexture(),\r\n      sizeAttenuation: sizeAttenuation,\r\n      depthWrite: false,\r\n      color: color\r\n    });\r\n    const range = 500;\r\n    for (let i = 0; i < 5000; i++) {\r\n      const particle = new THREE.Vector3(\r\n        Math.random() * range - range / 2,\r\n        Math.random() * range - range / 2,\r\n        Math.random() * range - range / 2\r\n      );\r\n      geom.vertices.push(particle);\r\n    }\r\n    cloud = new THREE.Points(geom, material);\r\n    cloud.name = 'pointcloud';\r\n    scene.add(cloud);\r\n  };\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  const controls = {\r\n    size: 15,\r\n    transparent: true,\r\n    opacity: 0.6,\r\n    color: 0xffffff,\r\n    rotateSystem: true,\r\n    sizeAttenuation: true,\r\n    redraw: () => {\r\n      if (scene.getObjectByName('pointcloud')) {\r\n        scene.remove(scene.getObjectByName('pointcloud'));\r\n      }\r\n      createPoints(\r\n        controls.size,\r\n        controls.transparent,\r\n        controls.opacity,\r\n        controls.sizeAttenuation,\r\n        controls.color\r\n      );\r\n    }\r\n  };\r\n\r\n  /* gui */\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, 'size', 0, 20).onChange(controls.redraw);\r\n  gui.add(controls, 'transparent').onChange(controls.redraw);\r\n  gui.add(controls, 'opacity', 0, 1).onChange(controls.redraw);\r\n  gui.addColor(controls, 'color').onChange(controls.redraw);\r\n  gui.add(controls, 'sizeAttenuation').onChange(controls.redraw);\r\n  gui.add(controls, 'rotateSystem');\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    if (controls.rotateSystem) {\r\n      step += 0.01;\r\n      cloud.rotation.x = step;\r\n      cloud.rotation.z = step;\r\n    }\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  controls.redraw();\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}