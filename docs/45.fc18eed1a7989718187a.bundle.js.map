{"version":3,"file":"45.fc18eed1a7989718187a.bundle.js","sources":["webpack:///./src/chapter4/6.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    window.innerWidth / window.innerHeight,\r\n    0.1,\r\n    1000\r\n  );\r\n\r\n  camera.position.x = -20;\r\n  camera.position.y = 30;\r\n  camera.position.z = 40;\r\n  camera.lookAt(new THREE.Vector3(10, 0, 0));\r\n\r\n  /* renderer */\r\n  const webGLRenderer = new THREE.WebGLRenderer();\r\n  webGLRenderer.setClearColor(new THREE.Color(0xeeeeee));\r\n  webGLRenderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  webGLRenderer.shadowMap.enabled = true;\r\n\r\n  const groundGeom = new THREE.PlaneGeometry(100, 100, 4, 4);\r\n  const groundMesh = new THREE.Mesh(\r\n    groundGeom,\r\n    new THREE.MeshBasicMaterial({ color: 0x555555 })\r\n  );\r\n  groundMesh.rotation.x = -Math.PI / 2;\r\n  groundMesh.position.y = -20;\r\n  scene.add(groundMesh);\r\n\r\n  const sphereGeometry = new THREE.SphereGeometry(14, 20, 20);\r\n  const cubeGeometry = new THREE.BoxGeometry(15, 15, 15);\r\n  const planeGeometry = new THREE.PlaneGeometry(14, 14, 4, 4);\r\n  const meshMaterial = new THREE.MeshLambertMaterial({ color: 0x7777ff });\r\n  const sphere = new THREE.Mesh(sphereGeometry, meshMaterial);\r\n  const cube = new THREE.Mesh(cubeGeometry, meshMaterial);\r\n  const plane = new THREE.Mesh(planeGeometry, meshMaterial);\r\n  sphere.position.x = 0;\r\n  sphere.position.y = 3;\r\n  sphere.position.z = 2;\r\n  cube.position.set(sphere.position.x, sphere.position.y, sphere.position.z);\r\n  plane.position.set(sphere.position.x, sphere.position.y, sphere.position.z);\r\n  scene.add(cube);\r\n\r\n  const ambientLight = new THREE.AmbientLight(0x0c0c0c);\r\n  scene.add(ambientLight);\r\n\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(-30, 60, 60);\r\n  spotLight.castShadow = true;\r\n  scene.add(spotLight);\r\n\r\n  document.getElementById('WebGL-output').appendChild(webGLRenderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    rotationSpeed: 0.02,\r\n    bouncingSpeed: 0.03,\r\n    opacity: meshMaterial.opacity,\r\n    transparent: meshMaterial.transparent,\r\n    overdraw: meshMaterial.overdraw,\r\n    visible: meshMaterial.visible,\r\n    emissive: meshMaterial.emissive.getHex(),\r\n    side: 'front',\r\n    color: meshMaterial.color.getStyle(),\r\n    selectedMesh: 'cube'\r\n  };\r\n\r\n  const gui = new dat.GUI();\r\n  const spGui = gui.addFolder('Mesh');\r\n  spGui.add(controls, 'opacity', 0, 1).onChange((e: number) => {\r\n    meshMaterial.opacity = e;\r\n  });\r\n  spGui.add(controls, 'transparent').onChange((e: boolean) => {\r\n    meshMaterial.transparent = e;\r\n  });\r\n  spGui.add(controls, 'visible').onChange((e: boolean) => {\r\n    meshMaterial.visible = e;\r\n  });\r\n  spGui\r\n    .addColor(controls, 'emissive')\r\n    .onChange((e: string | number | THREE.Color) => {\r\n      meshMaterial.emissive = new THREE.Color(e);\r\n    });\r\n  spGui\r\n    .add(controls, 'side', ['front', 'back', 'double'])\r\n    .onChange((e: 'front' | 'back' | 'double') => {\r\n      console.log(e);\r\n      switch (e) {\r\n        case 'front':\r\n          meshMaterial.side = THREE.FrontSide;\r\n          break;\r\n        case 'back':\r\n          meshMaterial.side = THREE.BackSide;\r\n          break;\r\n        case 'double':\r\n          meshMaterial.side = THREE.DoubleSide;\r\n          break;\r\n      }\r\n      meshMaterial.needsUpdate = true;\r\n    });\r\n  spGui.addColor(controls, 'color').onChange((e: string) => {\r\n    meshMaterial.color.setStyle(e);\r\n  });\r\n  spGui\r\n    .add(controls, 'selectedMesh', ['cube', 'sphere', 'plane'])\r\n    .onChange((e: 'cube' | 'sphere' | 'plane') => {\r\n      scene.remove(plane);\r\n      scene.remove(cube);\r\n      scene.remove(sphere);\r\n      switch (e) {\r\n        case 'cube':\r\n          scene.add(cube);\r\n          break;\r\n        case 'sphere':\r\n          scene.add(sphere);\r\n          break;\r\n        case 'plane':\r\n          scene.add(plane);\r\n          break;\r\n      }\r\n    });\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      webGLRenderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  let step = 0;\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    cube.rotation.y = step += 0.01;\r\n    plane.rotation.y = step;\r\n    sphere.rotation.y = step;\r\n\r\n    requestAnimationFrame(renderScene);\r\n    webGLRenderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}