{"version":3,"file":"15.3c5fc071e544c77027a1.bundle.js","sources":["webpack:///./src/chapter8/12.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/loaders/PLYLoader.js';\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = 10;\r\n  camera.position.y = 10;\r\n  camera.position.z = 10;\r\n  camera.lookAt(new THREE.Vector3(0, -2, 0));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setClearColor(new THREE.Color(0x000000));\r\n  renderer.setSize(VIEWPORT_W, VIEWPORT_H);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  // spotlight\r\n  const spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(20, 20, 20);\r\n  scene.add(spotLight);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  const generateSprite = () => {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 16;\r\n    canvas.height = 16;\r\n    const context = canvas.getContext('2d');\r\n    const gradient = context.createRadialGradient(\r\n      canvas.width / 2,\r\n      canvas.height / 2,\r\n      0,\r\n      canvas.width / 2,\r\n      canvas.height / 2,\r\n      canvas.width / 2\r\n    );\r\n    gradient.addColorStop(0, 'rgba(255,255,255,1)');\r\n    gradient.addColorStop(0.2, 'rgba(0,255,255,1)');\r\n    gradient.addColorStop(0.4, 'rgba(0,0,64,1)');\r\n    gradient.addColorStop(1, 'rgba(0,0,0,1)');\r\n    context.fillStyle = gradient;\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    const texture = new THREE.Texture(canvas);\r\n    texture.needsUpdate = true;\r\n    return texture;\r\n  };\r\n\r\n  const loader = new (THREE as any).PLYLoader();\r\n  let group = new THREE.Object3D();\r\n  loader.load('./assets/test.ply', (geometry: THREE.Geometry) => {\r\n    const material = new THREE.PointsMaterial({\r\n      color: 0xffffff,\r\n      size: 0.4,\r\n      opacity: 0.6,\r\n      transparent: true,\r\n      depthWrite: false,\r\n      blending: THREE.AdditiveBlending,\r\n      map: generateSprite()\r\n    });\r\n    group = new THREE.Points(geometry, material);\r\n    scene.add(group);\r\n  });\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    if (group) {\r\n      group.rotation.y += 0.006;\r\n    }\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}