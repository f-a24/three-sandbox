{"version":3,"file":"40.a44c635a32c352d04207.bundle.js","sources":["webpack:///./src/chapter3/6.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport * as Stats from 'stats.js';\r\nimport * as dat from 'dat.gui';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/renderers/WebGLDeferredRenderer';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/postprocessing/EffectComposer';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/shaders/CopyShader';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/postprocessing/RenderPass';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/postprocessing/ShaderPass';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/shaders/FXAAShader';\r\nimport 'imports-loader?THREE=three!../../node_modules/three/examples/js/lights/RectAreaLightUniformsLib';\r\n\r\ndeclare module 'three' {\r\n  function WebGLDeferredRenderer(parameters?: {\r\n    renderer?: THREE.Renderer;\r\n    width?: number;\r\n    height?: number;\r\n    antialias?: boolean;\r\n    cacheKeepAlive?: boolean;\r\n  }): void;\r\n}\r\n\r\nexport default () => {\r\n  // 画面サイズ\r\n  const VIEWPORT_W = window.innerWidth;\r\n  const VIEWPORT_H = window.innerHeight;\r\n\r\n  /* scene */\r\n  const scene = new THREE.Scene();\r\n\r\n  /* camera */\r\n  const camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    VIEWPORT_W / VIEWPORT_H,\r\n    0.1,\r\n    1000\r\n  );\r\n  camera.position.x = 20;\r\n  camera.position.y = 30;\r\n  camera.position.z = 21;\r\n  camera.lookAt(new THREE.Vector3(0, 0, -30));\r\n\r\n  /* renderer */\r\n  const renderer = new THREE.WebGLDeferredRenderer({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    antialias: true,\r\n    cacheKeepAlive: true\r\n  });\r\n\r\n  /* plane */\r\n  const planeGeometry = new THREE.PlaneGeometry(70, 70, 1, 1);\r\n  const planeMaterial = new THREE.MeshPhongMaterial({\r\n    color: 0xffffff,\r\n    specular: 0xffffff,\r\n    shininess: 200\r\n  });\r\n  const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n  plane.rotation.x = -0.5 * Math.PI;\r\n  plane.position.x = 0;\r\n  plane.position.y = 0;\r\n  plane.position.z = 0;\r\n  scene.add(plane);\r\n\r\n  const spotLight0 = new THREE.SpotLight(0xcccccc);\r\n  spotLight0.position.set(-40, 60, -10);\r\n  spotLight0.intensity = 0.1;\r\n  spotLight0.lookAt(plane.position);\r\n  scene.add(spotLight0);\r\n\r\n  const areaLight1 = new THREE.RectAreaLight(0xff0000, 3);\r\n  areaLight1.position.set(-10, 10, -35);\r\n  areaLight1.rotation.set(-Math.PI / 2, 0, 0);\r\n  areaLight1.width = 4;\r\n  areaLight1.height = 9.9;\r\n  scene.add(areaLight1);\r\n\r\n  const areaLight2 = new THREE.RectAreaLight(0x00ff00, 3);\r\n  areaLight2.position.set(0, 10, -35);\r\n  areaLight2.rotation.set(-Math.PI / 2, 0, 0);\r\n  areaLight2.width = 4;\r\n  areaLight2.height = 9.9;\r\n  scene.add(areaLight2);\r\n\r\n  const areaLight3 = new THREE.RectAreaLight(0x0000ff, 3);\r\n  areaLight3.position.set(10, 10, -35);\r\n  areaLight3.rotation.set(-Math.PI / 2, 0, 0);\r\n  areaLight3.width = 4;\r\n  areaLight3.height = 9.9;\r\n  scene.add(areaLight3);\r\n\r\n  const planeGeometry1 = new THREE.BoxGeometry(4, 10, 0);\r\n  const planeGeometry1Mat = new THREE.MeshBasicMaterial({ color: 0xff0000 });\r\n  let plane1 = new THREE.Mesh(planeGeometry1, planeGeometry1Mat);\r\n  plane1.position.copy(areaLight1.position);\r\n  scene.add(plane1);\r\n\r\n  const planeGeometry2 = new THREE.BoxGeometry(4, 10, 0);\r\n  const planeGeometry2Mat = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n  let plane2 = new THREE.Mesh(planeGeometry2, planeGeometry2Mat);\r\n  plane2.position.copy(areaLight2.position);\r\n  scene.add(plane2);\r\n\r\n  const planeGeometry3 = new THREE.BoxGeometry(4, 10, 0);\r\n  const planeGeometry3Mat = new THREE.MeshBasicMaterial({ color: 0x0000ff });\r\n  let plane3 = new THREE.Mesh(planeGeometry3, planeGeometry3Mat);\r\n  plane3.position.copy(areaLight3.position);\r\n  scene.add(plane3);\r\n\r\n  document.getElementById('WebGL-output').appendChild(renderer.domElement);\r\n\r\n  /* stats */\r\n  const initStats = () => {\r\n    const statsObj = new Stats();\r\n    statsObj.showPanel(0);\r\n    statsObj.dom.style.position = 'absolute';\r\n    statsObj.dom.style.left = '0px';\r\n    statsObj.dom.style.top = '0px';\r\n    document.getElementById('Stats-output').appendChild(statsObj.dom);\r\n    return statsObj;\r\n  };\r\n  const stats = initStats();\r\n\r\n  /* gui */\r\n  const controls = {\r\n    rotationSpeed: 0.02,\r\n    color1: 0xff0000,\r\n    intensity1: 2,\r\n    color2: 0x00ff00,\r\n    intensity2: 2,\r\n    color3: 0x0000ff,\r\n    intensity3: 2\r\n  };\r\n  const gui = new dat.GUI();\r\n  gui\r\n    .addColor(controls, 'color1')\r\n    .onChange((e: string | number | THREE.Color) => {\r\n      areaLight1.color = new THREE.Color(e);\r\n      planeGeometry1Mat.color = new THREE.Color(e);\r\n      scene.remove(plane1);\r\n      plane1 = new THREE.Mesh(planeGeometry1, planeGeometry1Mat);\r\n      plane1.position.copy(areaLight1.position);\r\n      scene.add(plane1);\r\n    });\r\n  gui.add(controls, 'intensity1', 0, 5).onChange((e: number) => {\r\n    areaLight1.intensity = e;\r\n  });\r\n  gui\r\n    .addColor(controls, 'color2')\r\n    .onChange((e: string | number | THREE.Color) => {\r\n      areaLight2.color = new THREE.Color(e);\r\n      planeGeometry2Mat.color = new THREE.Color(e);\r\n      scene.remove(plane2);\r\n      plane2 = new THREE.Mesh(planeGeometry2, planeGeometry2Mat);\r\n      plane2.position.copy(areaLight2.position);\r\n      scene.add(plane2);\r\n    });\r\n  gui.add(controls, 'intensity2', 0, 5).onChange((e: number) => {\r\n    areaLight2.intensity = e;\r\n  });\r\n  gui\r\n    .addColor(controls, 'color3')\r\n    .onChange((e: string | number | THREE.Color) => {\r\n      areaLight3.color = new THREE.Color(e);\r\n      planeGeometry3Mat.color = new THREE.Color(e);\r\n      scene.remove(plane3);\r\n      plane3 = new THREE.Mesh(planeGeometry1, planeGeometry3Mat);\r\n      plane3.position.copy(areaLight3.position);\r\n      scene.add(plane3);\r\n    });\r\n  gui.add(controls, 'intensity3', 0, 5).onChange((e: number) => {\r\n    areaLight3.intensity = e;\r\n  });\r\n\r\n  /* resize */\r\n  window.addEventListener(\r\n    'resize',\r\n    () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    false\r\n  );\r\n\r\n  /* render */\r\n  const renderScene = () => {\r\n    stats.update();\r\n\r\n    requestAnimationFrame(renderScene);\r\n    renderer.render(scene, camera);\r\n  };\r\n  renderScene();\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}